




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace Net_Battle_C2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool NotifyReceiveRecoveryHP(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyReceiveRecoveryHP;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, casterID);
		Arena_Server.Marshaler.Write(__msg, targetID);
		Arena_Server.Marshaler.Write(__msg, staticRecovery);
		Arena_Server.Marshaler.Write(__msg, dynamicRecovery);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyReceiveRecoveryHP, Common.NotifyReceiveRecoveryHP);
}

public bool NotifyReceiveRecoveryHP(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyReceiveRecoveryHP;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, casterID);
Arena_Server.Marshaler.Write(__msg, targetID);
Arena_Server.Marshaler.Write(__msg, staticRecovery);
Arena_Server.Marshaler.Write(__msg, dynamicRecovery);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyReceiveRecoveryHP, Common.NotifyReceiveRecoveryHP);
}
public bool NotifyReceiveRecoveryMP(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyReceiveRecoveryMP;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, casterID);
		Arena_Server.Marshaler.Write(__msg, targetID);
		Arena_Server.Marshaler.Write(__msg, staticRecovery);
		Arena_Server.Marshaler.Write(__msg, dynamicRecovery);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyReceiveRecoveryMP, Common.NotifyReceiveRecoveryMP);
}

public bool NotifyReceiveRecoveryMP(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyReceiveRecoveryMP;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, casterID);
Arena_Server.Marshaler.Write(__msg, targetID);
Arena_Server.Marshaler.Write(__msg, staticRecovery);
Arena_Server.Marshaler.Write(__msg, dynamicRecovery);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyReceiveRecoveryMP, Common.NotifyReceiveRecoveryMP);
}
public bool NotifyReceiveDamage(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, EAttackType type, float damage, float hitTime)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.NotifyReceiveDamage;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, casterID);
		Arena_Server.Marshaler.Write(__msg, targetID);
		Arena_Server.Marshaler.Write(__msg, type);
		Arena_Server.Marshaler.Write(__msg, damage);
		Arena_Server.Marshaler.Write(__msg, hitTime);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_NotifyReceiveDamage, Common.NotifyReceiveDamage);
}

public bool NotifyReceiveDamage(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, EAttackType type, float damage, float hitTime)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.NotifyReceiveDamage;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, casterID);
Arena_Server.Marshaler.Write(__msg, targetID);
Arena_Server.Marshaler.Write(__msg, type);
Arena_Server.Marshaler.Write(__msg, damage);
Arena_Server.Marshaler.Write(__msg, hitTime);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_NotifyReceiveDamage, Common.NotifyReceiveDamage);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyReceiveRecoveryHP="NotifyReceiveRecoveryHP";
public const string RmiName_NotifyReceiveRecoveryMP="NotifyReceiveRecoveryMP";
public const string RmiName_NotifyReceiveDamage="NotifyReceiveDamage";
       
public const string RmiName_First = RmiName_NotifyReceiveRecoveryHP;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyReceiveRecoveryHP="";
public const string RmiName_NotifyReceiveRecoveryMP="";
public const string RmiName_NotifyReceiveDamage="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

