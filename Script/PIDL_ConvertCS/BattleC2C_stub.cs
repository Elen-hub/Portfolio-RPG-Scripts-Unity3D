




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Net_Battle_C2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool NotifyReceiveRecoveryHPDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery);  
		public NotifyReceiveRecoveryHPDelegate NotifyReceiveRecoveryHP = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery)
		{ 
			return false;
		};
		public delegate bool NotifyReceiveRecoveryMPDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery);  
		public NotifyReceiveRecoveryMPDelegate NotifyReceiveRecoveryMP = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, float staticRecovery, float dynamicRecovery)
		{ 
			return false;
		};
		public delegate bool NotifyReceiveDamageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, EAttackType type, float damage, float hitTime);  
		public NotifyReceiveDamageDelegate NotifyReceiveDamage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int casterID, int targetID, EAttackType type, float damage, float hitTime)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.NotifyReceiveRecoveryHP:
            ProcessReceivedMessage_NotifyReceiveRecoveryHP(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyReceiveRecoveryMP:
            ProcessReceivedMessage_NotifyReceiveRecoveryMP(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyReceiveDamage:
            ProcessReceivedMessage_NotifyReceiveDamage(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_NotifyReceiveRecoveryHP(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int casterID; Arena_Server.Marshaler.Read(__msg,out casterID);	
int targetID; Arena_Server.Marshaler.Read(__msg,out targetID);	
float staticRecovery; Arena_Server.Marshaler.Read(__msg,out staticRecovery);	
float dynamicRecovery; Arena_Server.Marshaler.Read(__msg,out dynamicRecovery);	
core.PostCheckReadMessage(__msg, RmiName_NotifyReceiveRecoveryHP);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=casterID.ToString()+",";
parameterString+=targetID.ToString()+",";
parameterString+=staticRecovery.ToString()+",";
parameterString+=dynamicRecovery.ToString()+",";
        NotifyCallFromStub(Common.NotifyReceiveRecoveryHP, RmiName_NotifyReceiveRecoveryHP,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyReceiveRecoveryHP;
        summary.rmiName = RmiName_NotifyReceiveRecoveryHP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyReceiveRecoveryHP (remote,ctx , casterID, targetID, staticRecovery, dynamicRecovery );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyReceiveRecoveryHP);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyReceiveRecoveryHP;
        summary.rmiName = RmiName_NotifyReceiveRecoveryHP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyReceiveRecoveryMP(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int casterID; Arena_Server.Marshaler.Read(__msg,out casterID);	
int targetID; Arena_Server.Marshaler.Read(__msg,out targetID);	
float staticRecovery; Arena_Server.Marshaler.Read(__msg,out staticRecovery);	
float dynamicRecovery; Arena_Server.Marshaler.Read(__msg,out dynamicRecovery);	
core.PostCheckReadMessage(__msg, RmiName_NotifyReceiveRecoveryMP);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=casterID.ToString()+",";
parameterString+=targetID.ToString()+",";
parameterString+=staticRecovery.ToString()+",";
parameterString+=dynamicRecovery.ToString()+",";
        NotifyCallFromStub(Common.NotifyReceiveRecoveryMP, RmiName_NotifyReceiveRecoveryMP,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyReceiveRecoveryMP;
        summary.rmiName = RmiName_NotifyReceiveRecoveryMP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyReceiveRecoveryMP (remote,ctx , casterID, targetID, staticRecovery, dynamicRecovery );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyReceiveRecoveryMP);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyReceiveRecoveryMP;
        summary.rmiName = RmiName_NotifyReceiveRecoveryMP;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyReceiveDamage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int casterID; Arena_Server.Marshaler.Read(__msg,out casterID);	
int targetID; Arena_Server.Marshaler.Read(__msg,out targetID);	
EAttackType type; Arena_Server.Marshaler.Read(__msg,out type);	
float damage; Arena_Server.Marshaler.Read(__msg,out damage);	
float hitTime; Arena_Server.Marshaler.Read(__msg,out hitTime);	
core.PostCheckReadMessage(__msg, RmiName_NotifyReceiveDamage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=casterID.ToString()+",";
parameterString+=targetID.ToString()+",";
parameterString+=type.ToString()+",";
parameterString+=damage.ToString()+",";
parameterString+=hitTime.ToString()+",";
        NotifyCallFromStub(Common.NotifyReceiveDamage, RmiName_NotifyReceiveDamage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyReceiveDamage;
        summary.rmiName = RmiName_NotifyReceiveDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyReceiveDamage (remote,ctx , casterID, targetID, type, damage, hitTime );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyReceiveDamage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyReceiveDamage;
        summary.rmiName = RmiName_NotifyReceiveDamage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyReceiveRecoveryHP="NotifyReceiveRecoveryHP";
public const string RmiName_NotifyReceiveRecoveryMP="NotifyReceiveRecoveryMP";
public const string RmiName_NotifyReceiveDamage="NotifyReceiveDamage";
       
public const string RmiName_First = RmiName_NotifyReceiveRecoveryHP;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyReceiveRecoveryHP="";
public const string RmiName_NotifyReceiveRecoveryMP="";
public const string RmiName_NotifyReceiveDamage="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

