




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Net_Battle_C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestEnermyInstantiateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, UnityEngine.Vector3 pos, float angle);  
		public RequestEnermyInstantiateDelegate RequestEnermyInstantiate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, UnityEngine.Vector3 pos, float angle)
		{ 
			return false;
		};
		public delegate bool RequestEnermyKillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID);  
		public RequestEnermyKillDelegate RequestEnermyKill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID)
		{ 
			return false;
		};
		public delegate bool RequestGetRewordDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID);  
		public RequestGetRewordDelegate RequestGetReword = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestEnermyInstantiate:
            ProcessReceivedMessage_RequestEnermyInstantiate(__msg, pa, hostTag, remote);
            break;
        case Common.RequestEnermyKill:
            ProcessReceivedMessage_RequestEnermyKill(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetReword:
            ProcessReceivedMessage_RequestGetReword(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestEnermyInstantiate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
float angle; Arena_Server.Marshaler.Read(__msg,out angle);	
core.PostCheckReadMessage(__msg, RmiName_RequestEnermyInstantiate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=handle.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=angle.ToString()+",";
        NotifyCallFromStub(Common.RequestEnermyInstantiate, RmiName_RequestEnermyInstantiate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestEnermyInstantiate;
        summary.rmiName = RmiName_RequestEnermyInstantiate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestEnermyInstantiate (remote,ctx , handle, pos, angle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestEnermyInstantiate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestEnermyInstantiate;
        summary.rmiName = RmiName_RequestEnermyInstantiate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestEnermyKill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
core.PostCheckReadMessage(__msg, RmiName_RequestEnermyKill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=uniqueID.ToString()+",";
        NotifyCallFromStub(Common.RequestEnermyKill, RmiName_RequestEnermyKill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestEnermyKill;
        summary.rmiName = RmiName_RequestEnermyKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestEnermyKill (remote,ctx , uniqueID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestEnermyKill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestEnermyKill;
        summary.rmiName = RmiName_RequestEnermyKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetReword(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetReword);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=uniqueID.ToString()+",";
        NotifyCallFromStub(Common.RequestGetReword, RmiName_RequestGetReword,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetReword;
        summary.rmiName = RmiName_RequestGetReword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetReword (remote,ctx , uniqueID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetReword);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetReword;
        summary.rmiName = RmiName_RequestGetReword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestEnermyInstantiate="RequestEnermyInstantiate";
public const string RmiName_RequestEnermyKill="RequestEnermyKill";
public const string RmiName_RequestGetReword="RequestGetReword";
       
public const string RmiName_First = RmiName_RequestEnermyInstantiate;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestEnermyInstantiate="";
public const string RmiName_RequestEnermyKill="";
public const string RmiName_RequestGetReword="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

