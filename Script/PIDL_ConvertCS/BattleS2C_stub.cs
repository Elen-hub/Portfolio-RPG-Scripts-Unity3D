




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Net_Battle_S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool NotifyEnermyInstantiateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int uniqueID, int handle, UnityEngine.Vector3 pos, float angle);  
		public NotifyEnermyInstantiateDelegate NotifyEnermyInstantiate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int uniqueID, int handle, UnityEngine.Vector3 pos, float angle)
		{ 
			return false;
		};
		public delegate bool NotifyEnermyKillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int uniqueID, int exp, int gold, string itemArr);  
		public NotifyEnermyKillDelegate NotifyEnermyKill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int uniqueID, int exp, int gold, string itemArr)
		{ 
			return false;
		};
		public delegate bool NotifyGetRewordDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID getID, int uniqueID);  
		public NotifyGetRewordDelegate NotifyGetReword = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID getID, int uniqueID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.NotifyEnermyInstantiate:
            ProcessReceivedMessage_NotifyEnermyInstantiate(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyEnermyKill:
            ProcessReceivedMessage_NotifyEnermyKill(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyGetReword:
            ProcessReceivedMessage_NotifyGetReword(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_NotifyEnermyInstantiate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
float angle; Arena_Server.Marshaler.Read(__msg,out angle);	
core.PostCheckReadMessage(__msg, RmiName_NotifyEnermyInstantiate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=handle.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=angle.ToString()+",";
        NotifyCallFromStub(Common.NotifyEnermyInstantiate, RmiName_NotifyEnermyInstantiate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyEnermyInstantiate;
        summary.rmiName = RmiName_NotifyEnermyInstantiate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyEnermyInstantiate (remote,ctx , isSuccess, uniqueID, handle, pos, angle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyEnermyInstantiate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyEnermyInstantiate;
        summary.rmiName = RmiName_NotifyEnermyInstantiate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyEnermyKill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int exp; Arena_Server.Marshaler.Read(__msg,out exp);	
int gold; Arena_Server.Marshaler.Read(__msg,out gold);	
string itemArr; Arena_Server.Marshaler.Read(__msg,out itemArr);	
core.PostCheckReadMessage(__msg, RmiName_NotifyEnermyKill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=exp.ToString()+",";
parameterString+=gold.ToString()+",";
parameterString+=itemArr.ToString()+",";
        NotifyCallFromStub(Common.NotifyEnermyKill, RmiName_NotifyEnermyKill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyEnermyKill;
        summary.rmiName = RmiName_NotifyEnermyKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyEnermyKill (remote,ctx , isSuccess, uniqueID, exp, gold, itemArr );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyEnermyKill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyEnermyKill;
        summary.rmiName = RmiName_NotifyEnermyKill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyGetReword(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
Nettention.Proud.HostID getID; Arena_Server.Marshaler.Read(__msg,out getID);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyGetReword);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=getID.ToString()+",";
parameterString+=uniqueID.ToString()+",";
        NotifyCallFromStub(Common.NotifyGetReword, RmiName_NotifyGetReword,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyGetReword;
        summary.rmiName = RmiName_NotifyGetReword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyGetReword (remote,ctx , isSuccess, getID, uniqueID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyGetReword);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyGetReword;
        summary.rmiName = RmiName_NotifyGetReword;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyEnermyInstantiate="NotifyEnermyInstantiate";
public const string RmiName_NotifyEnermyKill="NotifyEnermyKill";
public const string RmiName_NotifyGetReword="NotifyGetReword";
       
public const string RmiName_First = RmiName_NotifyEnermyInstantiate;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyEnermyInstantiate="";
public const string RmiName_NotifyEnermyKill="";
public const string RmiName_NotifyGetReword="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

