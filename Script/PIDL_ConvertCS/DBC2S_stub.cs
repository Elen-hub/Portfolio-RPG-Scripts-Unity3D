




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace DB_Account_C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestConnectServerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id);  
		public RequestConnectServerDelegate RequestConnectServer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id)
		{ 
			return false;
		};
		public delegate bool RequestCreateCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id, string name, int handle);  
		public RequestCreateCharacterDelegate RequestCreateCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id, string name, int handle)
		{ 
			return false;
		};
		public delegate bool RequestPlayerCharactersInformationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestPlayerCharactersInformationDelegate RequestPlayerCharactersInformation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestDeleteCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id, string name);  
		public RequestDeleteCharacterDelegate RequestDeleteCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string id, string name)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestConnectServer:
            ProcessReceivedMessage_RequestConnectServer(__msg, pa, hostTag, remote);
            break;
        case Common.RequestCreateCharacter:
            ProcessReceivedMessage_RequestCreateCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPlayerCharactersInformation:
            ProcessReceivedMessage_RequestPlayerCharactersInformation(__msg, pa, hostTag, remote);
            break;
        case Common.RequestDeleteCharacter:
            ProcessReceivedMessage_RequestDeleteCharacter(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestConnectServer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string id; Arena_Server.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestConnectServer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.RequestConnectServer, RmiName_RequestConnectServer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestConnectServer;
        summary.rmiName = RmiName_RequestConnectServer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestConnectServer (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestConnectServer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestConnectServer;
        summary.rmiName = RmiName_RequestConnectServer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestCreateCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string id; Arena_Server.Marshaler.Read(__msg,out id);	
string name; Arena_Server.Marshaler.Read(__msg,out name);	
int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
core.PostCheckReadMessage(__msg, RmiName_RequestCreateCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=handle.ToString()+",";
        NotifyCallFromStub(Common.RequestCreateCharacter, RmiName_RequestCreateCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestCreateCharacter;
        summary.rmiName = RmiName_RequestCreateCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestCreateCharacter (remote,ctx , id, name, handle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestCreateCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestCreateCharacter;
        summary.rmiName = RmiName_RequestCreateCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPlayerCharactersInformation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestPlayerCharactersInformation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestPlayerCharactersInformation, RmiName_RequestPlayerCharactersInformation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPlayerCharactersInformation;
        summary.rmiName = RmiName_RequestPlayerCharactersInformation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPlayerCharactersInformation (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPlayerCharactersInformation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPlayerCharactersInformation;
        summary.rmiName = RmiName_RequestPlayerCharactersInformation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestDeleteCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string id; Arena_Server.Marshaler.Read(__msg,out id);	
string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestDeleteCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestDeleteCharacter, RmiName_RequestDeleteCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestDeleteCharacter;
        summary.rmiName = RmiName_RequestDeleteCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestDeleteCharacter (remote,ctx , id, name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestDeleteCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestDeleteCharacter;
        summary.rmiName = RmiName_RequestDeleteCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestConnectServer="RequestConnectServer";
public const string RmiName_RequestCreateCharacter="RequestCreateCharacter";
public const string RmiName_RequestPlayerCharactersInformation="RequestPlayerCharactersInformation";
public const string RmiName_RequestDeleteCharacter="RequestDeleteCharacter";
       
public const string RmiName_First = RmiName_RequestConnectServer;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestConnectServer="";
public const string RmiName_RequestCreateCharacter="";
public const string RmiName_RequestPlayerCharactersInformation="";
public const string RmiName_RequestDeleteCharacter="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace DB_Information_C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestGetPlayerStorageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestGetPlayerStorageDelegate RequestGetPlayerStorage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestGetCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestGetCharacterDelegate RequestGetCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
		public delegate bool RequestGetCharacterEquipmentDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestGetCharacterEquipmentDelegate RequestGetCharacterEquipment = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
		public delegate bool RequestGetCharacterInventoryDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestGetCharacterInventoryDelegate RequestGetCharacterInventory = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
		public delegate bool RequestGetCharacterQuestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestGetCharacterQuestDelegate RequestGetCharacterQuest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
		public delegate bool RequestGetCharacterSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestGetCharacterSkillDelegate RequestGetCharacterSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
		public delegate bool RequestGetQuickSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestGetQuickSlotDelegate RequestGetQuickSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestGetPlayerStorage:
            ProcessReceivedMessage_RequestGetPlayerStorage(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetCharacter:
            ProcessReceivedMessage_RequestGetCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetCharacterEquipment:
            ProcessReceivedMessage_RequestGetCharacterEquipment(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetCharacterInventory:
            ProcessReceivedMessage_RequestGetCharacterInventory(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetCharacterQuest:
            ProcessReceivedMessage_RequestGetCharacterQuest(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetCharacterSkill:
            ProcessReceivedMessage_RequestGetCharacterSkill(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetQuickSlot:
            ProcessReceivedMessage_RequestGetQuickSlot(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestGetPlayerStorage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestGetPlayerStorage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestGetPlayerStorage, RmiName_RequestGetPlayerStorage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetPlayerStorage;
        summary.rmiName = RmiName_RequestGetPlayerStorage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetPlayerStorage (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetPlayerStorage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetPlayerStorage;
        summary.rmiName = RmiName_RequestGetPlayerStorage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestGetCharacter, RmiName_RequestGetCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetCharacter;
        summary.rmiName = RmiName_RequestGetCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetCharacter (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetCharacter;
        summary.rmiName = RmiName_RequestGetCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetCharacterEquipment(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetCharacterEquipment);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestGetCharacterEquipment, RmiName_RequestGetCharacterEquipment,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetCharacterEquipment;
        summary.rmiName = RmiName_RequestGetCharacterEquipment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetCharacterEquipment (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetCharacterEquipment);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetCharacterEquipment;
        summary.rmiName = RmiName_RequestGetCharacterEquipment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetCharacterInventory(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetCharacterInventory);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestGetCharacterInventory, RmiName_RequestGetCharacterInventory,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetCharacterInventory;
        summary.rmiName = RmiName_RequestGetCharacterInventory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetCharacterInventory (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetCharacterInventory);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetCharacterInventory;
        summary.rmiName = RmiName_RequestGetCharacterInventory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetCharacterQuest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetCharacterQuest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestGetCharacterQuest, RmiName_RequestGetCharacterQuest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetCharacterQuest;
        summary.rmiName = RmiName_RequestGetCharacterQuest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetCharacterQuest (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetCharacterQuest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetCharacterQuest;
        summary.rmiName = RmiName_RequestGetCharacterQuest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetCharacterSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetCharacterSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestGetCharacterSkill, RmiName_RequestGetCharacterSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetCharacterSkill;
        summary.rmiName = RmiName_RequestGetCharacterSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetCharacterSkill (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetCharacterSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetCharacterSkill;
        summary.rmiName = RmiName_RequestGetCharacterSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetQuickSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetQuickSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestGetQuickSlot, RmiName_RequestGetQuickSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetQuickSlot;
        summary.rmiName = RmiName_RequestGetQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetQuickSlot (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetQuickSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetQuickSlot;
        summary.rmiName = RmiName_RequestGetQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestGetPlayerStorage="RequestGetPlayerStorage";
public const string RmiName_RequestGetCharacter="RequestGetCharacter";
public const string RmiName_RequestGetCharacterEquipment="RequestGetCharacterEquipment";
public const string RmiName_RequestGetCharacterInventory="RequestGetCharacterInventory";
public const string RmiName_RequestGetCharacterQuest="RequestGetCharacterQuest";
public const string RmiName_RequestGetCharacterSkill="RequestGetCharacterSkill";
public const string RmiName_RequestGetQuickSlot="RequestGetQuickSlot";
       
public const string RmiName_First = RmiName_RequestGetPlayerStorage;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestGetPlayerStorage="";
public const string RmiName_RequestGetCharacter="";
public const string RmiName_RequestGetCharacterEquipment="";
public const string RmiName_RequestGetCharacterInventory="";
public const string RmiName_RequestGetCharacterQuest="";
public const string RmiName_RequestGetCharacterSkill="";
public const string RmiName_RequestGetQuickSlot="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace DB_Alter_C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestItemBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle);  
		public RequestItemBuyDelegate RequestItemBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle)
		{ 
			return false;
		};
		public delegate bool RequestItemBuyNumberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle, int number);  
		public RequestItemBuyNumberDelegate RequestItemBuyNumber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle, int number)
		{ 
			return false;
		};
		public delegate bool RequestItemUseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle);  
		public RequestItemUseDelegate RequestItemUse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle)
		{ 
			return false;
		};
		public delegate bool RequestItemEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum);  
		public RequestItemEquipDelegate RequestItemEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum)
		{ 
			return false;
		};
		public delegate bool RequestItemUnEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EItemType itemType);  
		public RequestItemUnEquipDelegate RequestItemUnEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EItemType itemType)
		{ 
			return false;
		};
		public delegate bool RequestItemDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum);  
		public RequestItemDeleteDelegate RequestItemDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum)
		{ 
			return false;
		};
		public delegate bool RequestItemDeleteNumberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum, int number);  
		public RequestItemDeleteNumberDelegate RequestItemDeleteNumber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum, int number)
		{ 
			return false;
		};
		public delegate bool RequestItemSellDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum);  
		public RequestItemSellDelegate RequestItemSell = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum)
		{ 
			return false;
		};
		public delegate bool RequestItemSellNumberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum, int number);  
		public RequestItemSellNumberDelegate RequestItemSellNumber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int inventoryNum, int number)
		{ 
			return false;
		};
		public delegate bool RequestItemProduceDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle);  
		public RequestItemProduceDelegate RequestItemProduce = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle)
		{ 
			return false;
		};
		public delegate bool RequestInvenvorySortDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestInvenvorySortDelegate RequestInvenvorySort = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestQuestAcceptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questHandle);  
		public RequestQuestAcceptDelegate RequestQuestAccept = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questHandle)
		{ 
			return false;
		};
		public delegate bool RequestQuestDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questHandle);  
		public RequestQuestDeleteDelegate RequestQuestDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questHandle)
		{ 
			return false;
		};
		public delegate bool RequestQuestClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questHandle);  
		public RequestQuestClearDelegate RequestQuestClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int questHandle)
		{ 
			return false;
		};
		public delegate bool RequestStatusUseStatPointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EStatType type);  
		public RequestStatusUseStatPointDelegate RequestStatusUseStatPoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EStatType type)
		{ 
			return false;
		};
		public delegate bool RequestStatusUseSkillPointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int skillHandle);  
		public RequestStatusUseSkillPointDelegate RequestStatusUseSkillPoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int skillHandle)
		{ 
			return false;
		};
		public delegate bool RequestDeleteQuickSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int number);  
		public RequestDeleteQuickSlotDelegate RequestDeleteQuickSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int number)
		{ 
			return false;
		};
		public delegate bool RequestSetQuickSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int number, bool isItem, int handle);  
		public RequestSetQuickSlotDelegate RequestSetQuickSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int number, bool isItem, int handle)
		{ 
			return false;
		};
		public delegate bool RequestGetCouponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, int value);  
		public RequestGetCouponDelegate RequestGetCoupon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, int value)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestItemBuy:
            ProcessReceivedMessage_RequestItemBuy(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemBuyNumber:
            ProcessReceivedMessage_RequestItemBuyNumber(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemUse:
            ProcessReceivedMessage_RequestItemUse(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemEquip:
            ProcessReceivedMessage_RequestItemEquip(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemUnEquip:
            ProcessReceivedMessage_RequestItemUnEquip(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemDelete:
            ProcessReceivedMessage_RequestItemDelete(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemDeleteNumber:
            ProcessReceivedMessage_RequestItemDeleteNumber(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemSell:
            ProcessReceivedMessage_RequestItemSell(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemSellNumber:
            ProcessReceivedMessage_RequestItemSellNumber(__msg, pa, hostTag, remote);
            break;
        case Common.RequestItemProduce:
            ProcessReceivedMessage_RequestItemProduce(__msg, pa, hostTag, remote);
            break;
        case Common.RequestInvenvorySort:
            ProcessReceivedMessage_RequestInvenvorySort(__msg, pa, hostTag, remote);
            break;
        case Common.RequestQuestAccept:
            ProcessReceivedMessage_RequestQuestAccept(__msg, pa, hostTag, remote);
            break;
        case Common.RequestQuestDelete:
            ProcessReceivedMessage_RequestQuestDelete(__msg, pa, hostTag, remote);
            break;
        case Common.RequestQuestClear:
            ProcessReceivedMessage_RequestQuestClear(__msg, pa, hostTag, remote);
            break;
        case Common.RequestStatusUseStatPoint:
            ProcessReceivedMessage_RequestStatusUseStatPoint(__msg, pa, hostTag, remote);
            break;
        case Common.RequestStatusUseSkillPoint:
            ProcessReceivedMessage_RequestStatusUseSkillPoint(__msg, pa, hostTag, remote);
            break;
        case Common.RequestDeleteQuickSlot:
            ProcessReceivedMessage_RequestDeleteQuickSlot(__msg, pa, hostTag, remote);
            break;
        case Common.RequestSetQuickSlot:
            ProcessReceivedMessage_RequestSetQuickSlot(__msg, pa, hostTag, remote);
            break;
        case Common.RequestGetCoupon:
            ProcessReceivedMessage_RequestGetCoupon(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestItemBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int itemHandle; Arena_Server.Marshaler.Read(__msg,out itemHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestItemBuy, RmiName_RequestItemBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemBuy;
        summary.rmiName = RmiName_RequestItemBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemBuy (remote,ctx , itemHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemBuy;
        summary.rmiName = RmiName_RequestItemBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemBuyNumber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int itemHandle; Arena_Server.Marshaler.Read(__msg,out itemHandle);	
int number; Arena_Server.Marshaler.Read(__msg,out number);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemBuyNumber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemHandle.ToString()+",";
parameterString+=number.ToString()+",";
        NotifyCallFromStub(Common.RequestItemBuyNumber, RmiName_RequestItemBuyNumber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemBuyNumber;
        summary.rmiName = RmiName_RequestItemBuyNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemBuyNumber (remote,ctx , itemHandle, number );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemBuyNumber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemBuyNumber;
        summary.rmiName = RmiName_RequestItemBuyNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemUse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int itemHandle; Arena_Server.Marshaler.Read(__msg,out itemHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemUse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestItemUse, RmiName_RequestItemUse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemUse;
        summary.rmiName = RmiName_RequestItemUse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemUse (remote,ctx , itemHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemUse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemUse;
        summary.rmiName = RmiName_RequestItemUse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int inventoryNum; Arena_Server.Marshaler.Read(__msg,out inventoryNum);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=inventoryNum.ToString()+",";
        NotifyCallFromStub(Common.RequestItemEquip, RmiName_RequestItemEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemEquip;
        summary.rmiName = RmiName_RequestItemEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemEquip (remote,ctx , inventoryNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemEquip;
        summary.rmiName = RmiName_RequestItemEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemUnEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        EItemType itemType; Arena_Server.Marshaler.Read(__msg,out itemType);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemUnEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemType.ToString()+",";
        NotifyCallFromStub(Common.RequestItemUnEquip, RmiName_RequestItemUnEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemUnEquip;
        summary.rmiName = RmiName_RequestItemUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemUnEquip (remote,ctx , itemType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemUnEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemUnEquip;
        summary.rmiName = RmiName_RequestItemUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemDelete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int inventoryNum; Arena_Server.Marshaler.Read(__msg,out inventoryNum);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemDelete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=inventoryNum.ToString()+",";
        NotifyCallFromStub(Common.RequestItemDelete, RmiName_RequestItemDelete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemDelete;
        summary.rmiName = RmiName_RequestItemDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemDelete (remote,ctx , inventoryNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemDelete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemDelete;
        summary.rmiName = RmiName_RequestItemDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemDeleteNumber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int inventoryNum; Arena_Server.Marshaler.Read(__msg,out inventoryNum);	
int number; Arena_Server.Marshaler.Read(__msg,out number);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemDeleteNumber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=inventoryNum.ToString()+",";
parameterString+=number.ToString()+",";
        NotifyCallFromStub(Common.RequestItemDeleteNumber, RmiName_RequestItemDeleteNumber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemDeleteNumber;
        summary.rmiName = RmiName_RequestItemDeleteNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemDeleteNumber (remote,ctx , inventoryNum, number );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemDeleteNumber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemDeleteNumber;
        summary.rmiName = RmiName_RequestItemDeleteNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemSell(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int inventoryNum; Arena_Server.Marshaler.Read(__msg,out inventoryNum);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemSell);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=inventoryNum.ToString()+",";
        NotifyCallFromStub(Common.RequestItemSell, RmiName_RequestItemSell,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemSell;
        summary.rmiName = RmiName_RequestItemSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemSell (remote,ctx , inventoryNum );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemSell);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemSell;
        summary.rmiName = RmiName_RequestItemSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemSellNumber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int inventoryNum; Arena_Server.Marshaler.Read(__msg,out inventoryNum);	
int number; Arena_Server.Marshaler.Read(__msg,out number);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemSellNumber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=inventoryNum.ToString()+",";
parameterString+=number.ToString()+",";
        NotifyCallFromStub(Common.RequestItemSellNumber, RmiName_RequestItemSellNumber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemSellNumber;
        summary.rmiName = RmiName_RequestItemSellNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemSellNumber (remote,ctx , inventoryNum, number );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemSellNumber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemSellNumber;
        summary.rmiName = RmiName_RequestItemSellNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestItemProduce(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
core.PostCheckReadMessage(__msg, RmiName_RequestItemProduce);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=handle.ToString()+",";
        NotifyCallFromStub(Common.RequestItemProduce, RmiName_RequestItemProduce,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestItemProduce;
        summary.rmiName = RmiName_RequestItemProduce;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestItemProduce (remote,ctx , handle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestItemProduce);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestItemProduce;
        summary.rmiName = RmiName_RequestItemProduce;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestInvenvorySort(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestInvenvorySort);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestInvenvorySort, RmiName_RequestInvenvorySort,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestInvenvorySort;
        summary.rmiName = RmiName_RequestInvenvorySort;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestInvenvorySort (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestInvenvorySort);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestInvenvorySort;
        summary.rmiName = RmiName_RequestInvenvorySort;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestQuestAccept(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int questHandle; Arena_Server.Marshaler.Read(__msg,out questHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestQuestAccept);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=questHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestQuestAccept, RmiName_RequestQuestAccept,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestQuestAccept;
        summary.rmiName = RmiName_RequestQuestAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestQuestAccept (remote,ctx , questHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestQuestAccept);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestQuestAccept;
        summary.rmiName = RmiName_RequestQuestAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestQuestDelete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int questHandle; Arena_Server.Marshaler.Read(__msg,out questHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestQuestDelete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=questHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestQuestDelete, RmiName_RequestQuestDelete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestQuestDelete;
        summary.rmiName = RmiName_RequestQuestDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestQuestDelete (remote,ctx , questHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestQuestDelete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestQuestDelete;
        summary.rmiName = RmiName_RequestQuestDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestQuestClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int questHandle; Arena_Server.Marshaler.Read(__msg,out questHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestQuestClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=questHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestQuestClear, RmiName_RequestQuestClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestQuestClear;
        summary.rmiName = RmiName_RequestQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestQuestClear (remote,ctx , questHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestQuestClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestQuestClear;
        summary.rmiName = RmiName_RequestQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestStatusUseStatPoint(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        EStatType type; Arena_Server.Marshaler.Read(__msg,out type);	
core.PostCheckReadMessage(__msg, RmiName_RequestStatusUseStatPoint);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=type.ToString()+",";
        NotifyCallFromStub(Common.RequestStatusUseStatPoint, RmiName_RequestStatusUseStatPoint,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestStatusUseStatPoint;
        summary.rmiName = RmiName_RequestStatusUseStatPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestStatusUseStatPoint (remote,ctx , type );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestStatusUseStatPoint);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestStatusUseStatPoint;
        summary.rmiName = RmiName_RequestStatusUseStatPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestStatusUseSkillPoint(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int skillHandle; Arena_Server.Marshaler.Read(__msg,out skillHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestStatusUseSkillPoint);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=skillHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestStatusUseSkillPoint, RmiName_RequestStatusUseSkillPoint,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestStatusUseSkillPoint;
        summary.rmiName = RmiName_RequestStatusUseSkillPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestStatusUseSkillPoint (remote,ctx , skillHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestStatusUseSkillPoint);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestStatusUseSkillPoint;
        summary.rmiName = RmiName_RequestStatusUseSkillPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestDeleteQuickSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int number; Arena_Server.Marshaler.Read(__msg,out number);	
core.PostCheckReadMessage(__msg, RmiName_RequestDeleteQuickSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=number.ToString()+",";
        NotifyCallFromStub(Common.RequestDeleteQuickSlot, RmiName_RequestDeleteQuickSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestDeleteQuickSlot;
        summary.rmiName = RmiName_RequestDeleteQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestDeleteQuickSlot (remote,ctx , number );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestDeleteQuickSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestDeleteQuickSlot;
        summary.rmiName = RmiName_RequestDeleteQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestSetQuickSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int number; Arena_Server.Marshaler.Read(__msg,out number);	
bool isItem; Arena_Server.Marshaler.Read(__msg,out isItem);	
int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
core.PostCheckReadMessage(__msg, RmiName_RequestSetQuickSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=number.ToString()+",";
parameterString+=isItem.ToString()+",";
parameterString+=handle.ToString()+",";
        NotifyCallFromStub(Common.RequestSetQuickSlot, RmiName_RequestSetQuickSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestSetQuickSlot;
        summary.rmiName = RmiName_RequestSetQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestSetQuickSlot (remote,ctx , number, isItem, handle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestSetQuickSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestSetQuickSlot;
        summary.rmiName = RmiName_RequestSetQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestGetCoupon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
int value; Arena_Server.Marshaler.Read(__msg,out value);	
core.PostCheckReadMessage(__msg, RmiName_RequestGetCoupon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=handle.ToString()+",";
parameterString+=value.ToString()+",";
        NotifyCallFromStub(Common.RequestGetCoupon, RmiName_RequestGetCoupon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestGetCoupon;
        summary.rmiName = RmiName_RequestGetCoupon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestGetCoupon (remote,ctx , handle, value );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestGetCoupon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestGetCoupon;
        summary.rmiName = RmiName_RequestGetCoupon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestItemBuy="RequestItemBuy";
public const string RmiName_RequestItemBuyNumber="RequestItemBuyNumber";
public const string RmiName_RequestItemUse="RequestItemUse";
public const string RmiName_RequestItemEquip="RequestItemEquip";
public const string RmiName_RequestItemUnEquip="RequestItemUnEquip";
public const string RmiName_RequestItemDelete="RequestItemDelete";
public const string RmiName_RequestItemDeleteNumber="RequestItemDeleteNumber";
public const string RmiName_RequestItemSell="RequestItemSell";
public const string RmiName_RequestItemSellNumber="RequestItemSellNumber";
public const string RmiName_RequestItemProduce="RequestItemProduce";
public const string RmiName_RequestInvenvorySort="RequestInvenvorySort";
public const string RmiName_RequestQuestAccept="RequestQuestAccept";
public const string RmiName_RequestQuestDelete="RequestQuestDelete";
public const string RmiName_RequestQuestClear="RequestQuestClear";
public const string RmiName_RequestStatusUseStatPoint="RequestStatusUseStatPoint";
public const string RmiName_RequestStatusUseSkillPoint="RequestStatusUseSkillPoint";
public const string RmiName_RequestDeleteQuickSlot="RequestDeleteQuickSlot";
public const string RmiName_RequestSetQuickSlot="RequestSetQuickSlot";
public const string RmiName_RequestGetCoupon="RequestGetCoupon";
       
public const string RmiName_First = RmiName_RequestItemBuy;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestItemBuy="";
public const string RmiName_RequestItemBuyNumber="";
public const string RmiName_RequestItemUse="";
public const string RmiName_RequestItemEquip="";
public const string RmiName_RequestItemUnEquip="";
public const string RmiName_RequestItemDelete="";
public const string RmiName_RequestItemDeleteNumber="";
public const string RmiName_RequestItemSell="";
public const string RmiName_RequestItemSellNumber="";
public const string RmiName_RequestItemProduce="";
public const string RmiName_RequestInvenvorySort="";
public const string RmiName_RequestQuestAccept="";
public const string RmiName_RequestQuestDelete="";
public const string RmiName_RequestQuestClear="";
public const string RmiName_RequestStatusUseStatPoint="";
public const string RmiName_RequestStatusUseSkillPoint="";
public const string RmiName_RequestDeleteQuickSlot="";
public const string RmiName_RequestSetQuickSlot="";
public const string RmiName_RequestGetCoupon="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

