




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace DB_Account_S2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool ReplyConnectServer(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isConnect, int hostID, string values)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyConnectServer;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isConnect);
		Arena_Server.Marshaler.Write(__msg, hostID);
		Arena_Server.Marshaler.Write(__msg, values);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyConnectServer, Common.ReplyConnectServer);
}

public bool ReplyConnectServer(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isConnect, int hostID, string values)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyConnectServer;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isConnect);
Arena_Server.Marshaler.Write(__msg, hostID);
Arena_Server.Marshaler.Write(__msg, values);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyConnectServer, Common.ReplyConnectServer);
}
public bool ReplyCreateCharacter(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isCreate, string values)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyCreateCharacter;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isCreate);
		Arena_Server.Marshaler.Write(__msg, values);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyCreateCharacter, Common.ReplyCreateCharacter);
}

public bool ReplyCreateCharacter(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isCreate, string values)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyCreateCharacter;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isCreate);
Arena_Server.Marshaler.Write(__msg, values);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyCreateCharacter, Common.ReplyCreateCharacter);
}
public bool ReplyPlayerCharactersInformation(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string characterValues)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyPlayerCharactersInformation;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, characterValues);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyPlayerCharactersInformation, Common.ReplyPlayerCharactersInformation);
}

public bool ReplyPlayerCharactersInformation(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string characterValues)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyPlayerCharactersInformation;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, characterValues);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyPlayerCharactersInformation, Common.ReplyPlayerCharactersInformation);
}
public bool ReplyDeleteCharacters(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isDelete)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyDeleteCharacters;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isDelete);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyDeleteCharacters, Common.ReplyDeleteCharacters);
}

public bool ReplyDeleteCharacters(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isDelete)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyDeleteCharacters;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isDelete);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyDeleteCharacters, Common.ReplyDeleteCharacters);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyConnectServer="ReplyConnectServer";
public const string RmiName_ReplyCreateCharacter="ReplyCreateCharacter";
public const string RmiName_ReplyPlayerCharactersInformation="ReplyPlayerCharactersInformation";
public const string RmiName_ReplyDeleteCharacters="ReplyDeleteCharacters";
       
public const string RmiName_First = RmiName_ReplyConnectServer;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyConnectServer="";
public const string RmiName_ReplyCreateCharacter="";
public const string RmiName_ReplyPlayerCharactersInformation="";
public const string RmiName_ReplyDeleteCharacters="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace DB_Information_S2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool ReplyGetPlayerStorage(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetPlayerStorage;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, data);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetPlayerStorage, Common.ReplyGetPlayerStorage);
}

public bool ReplyGetPlayerStorage(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetPlayerStorage;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, data);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetPlayerStorage, Common.ReplyGetPlayerStorage);
}
public bool ReplyGetCharacter(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string infoData, string statusData, string equipData)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacter;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, infoData);
		Arena_Server.Marshaler.Write(__msg, statusData);
		Arena_Server.Marshaler.Write(__msg, equipData);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCharacter, Common.ReplyGetCharacter);
}

public bool ReplyGetCharacter(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string infoData, string statusData, string equipData)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacter;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, infoData);
Arena_Server.Marshaler.Write(__msg, statusData);
Arena_Server.Marshaler.Write(__msg, equipData);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCharacter, Common.ReplyGetCharacter);
}
public bool ReplyGetCharacterEquipment(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterEquipment;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, data);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCharacterEquipment, Common.ReplyGetCharacterEquipment);
}

public bool ReplyGetCharacterEquipment(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterEquipment;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, data);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCharacterEquipment, Common.ReplyGetCharacterEquipment);
}
public bool ReplyGetCharacterInventory(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterInventory;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, data);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCharacterInventory, Common.ReplyGetCharacterInventory);
}

public bool ReplyGetCharacterInventory(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterInventory;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, data);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCharacterInventory, Common.ReplyGetCharacterInventory);
}
public bool ReplyGetCharacterQuest(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterQuest;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, data);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCharacterQuest, Common.ReplyGetCharacterQuest);
}

public bool ReplyGetCharacterQuest(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterQuest;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, data);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCharacterQuest, Common.ReplyGetCharacterQuest);
}
public bool ReplyGetCharacterSkill(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterSkill;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, data);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCharacterSkill, Common.ReplyGetCharacterSkill);
}

public bool ReplyGetCharacterSkill(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterSkill;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, data);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCharacterSkill, Common.ReplyGetCharacterSkill);
}
public bool ReplyGetCharacterQuickSlot(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterQuickSlot;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSearch);
		Arena_Server.Marshaler.Write(__msg, data);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCharacterQuickSlot, Common.ReplyGetCharacterQuickSlot);
}

public bool ReplyGetCharacterQuickSlot(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCharacterQuickSlot;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSearch);
Arena_Server.Marshaler.Write(__msg, data);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCharacterQuickSlot, Common.ReplyGetCharacterQuickSlot);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyGetPlayerStorage="ReplyGetPlayerStorage";
public const string RmiName_ReplyGetCharacter="ReplyGetCharacter";
public const string RmiName_ReplyGetCharacterEquipment="ReplyGetCharacterEquipment";
public const string RmiName_ReplyGetCharacterInventory="ReplyGetCharacterInventory";
public const string RmiName_ReplyGetCharacterQuest="ReplyGetCharacterQuest";
public const string RmiName_ReplyGetCharacterSkill="ReplyGetCharacterSkill";
public const string RmiName_ReplyGetCharacterQuickSlot="ReplyGetCharacterQuickSlot";
       
public const string RmiName_First = RmiName_ReplyGetPlayerStorage;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyGetPlayerStorage="";
public const string RmiName_ReplyGetCharacter="";
public const string RmiName_ReplyGetCharacterEquipment="";
public const string RmiName_ReplyGetCharacterInventory="";
public const string RmiName_ReplyGetCharacterQuest="";
public const string RmiName_ReplyGetCharacterSkill="";
public const string RmiName_ReplyGetCharacterQuickSlot="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}
namespace DB_Alter_S2C
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool ReplyItemBuy(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemBuy;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemBuy, Common.ReplyItemBuy);
}

public bool ReplyItemBuy(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemBuy;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemBuy, Common.ReplyItemBuy);
}
public bool ReplyItemBuyNumber(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemBuyNumber;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemBuyNumber, Common.ReplyItemBuyNumber);
}

public bool ReplyItemBuyNumber(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemBuyNumber;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemBuyNumber, Common.ReplyItemBuyNumber);
}
public bool ReplyItemUse(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemUse;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemUse, Common.ReplyItemUse);
}

public bool ReplyItemUse(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemUse;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemUse, Common.ReplyItemUse);
}
public bool ReplyItemEquip(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemEquip;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemEquip, Common.ReplyItemEquip);
}

public bool ReplyItemEquip(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemEquip;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemEquip, Common.ReplyItemEquip);
}
public bool ReplyItemUnEquip(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemUnEquip;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemUnEquip, Common.ReplyItemUnEquip);
}

public bool ReplyItemUnEquip(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemUnEquip;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemUnEquip, Common.ReplyItemUnEquip);
}
public bool ReplyItemDelete(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemDelete;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemDelete, Common.ReplyItemDelete);
}

public bool ReplyItemDelete(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemDelete;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemDelete, Common.ReplyItemDelete);
}
public bool ReplyItemDeleteNumber(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemDeleteNumber;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemDeleteNumber, Common.ReplyItemDeleteNumber);
}

public bool ReplyItemDeleteNumber(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemDeleteNumber;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemDeleteNumber, Common.ReplyItemDeleteNumber);
}
public bool ReplyItemSell(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemSell;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemSell, Common.ReplyItemSell);
}

public bool ReplyItemSell(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemSell;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemSell, Common.ReplyItemSell);
}
public bool ReplyItemSellNumber(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemSellNumber;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemSellNumber, Common.ReplyItemSellNumber);
}

public bool ReplyItemSellNumber(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemSellNumber;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemSellNumber, Common.ReplyItemSellNumber);
}
public bool ReplyItemProduce(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int produceHandle, int errorCode)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyItemProduce;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		Arena_Server.Marshaler.Write(__msg, produceHandle);
		Arena_Server.Marshaler.Write(__msg, errorCode);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyItemProduce, Common.ReplyItemProduce);
}

public bool ReplyItemProduce(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int produceHandle, int errorCode)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyItemProduce;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
Arena_Server.Marshaler.Write(__msg, produceHandle);
Arena_Server.Marshaler.Write(__msg, errorCode);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyItemProduce, Common.ReplyItemProduce);
}
public bool ReplyInventorySort(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyInventorySort;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyInventorySort, Common.ReplyInventorySort);
}

public bool ReplyInventorySort(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyInventorySort;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyInventorySort, Common.ReplyInventorySort);
}
public bool ReplyQuestAccept(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyQuestAccept;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyQuestAccept, Common.ReplyQuestAccept);
}

public bool ReplyQuestAccept(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyQuestAccept;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyQuestAccept, Common.ReplyQuestAccept);
}
public bool ReplyQuestDelete(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyQuestDelete;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyQuestDelete, Common.ReplyQuestDelete);
}

public bool ReplyQuestDelete(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyQuestDelete;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyQuestDelete, Common.ReplyQuestDelete);
}
public bool ReplyQuestClear(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyQuestClear;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyQuestClear, Common.ReplyQuestClear);
}

public bool ReplyQuestClear(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyQuestClear;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyQuestClear, Common.ReplyQuestClear);
}
public bool ReplyStatusGetExp(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyStatusGetExp;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyStatusGetExp, Common.ReplyStatusGetExp);
}

public bool ReplyStatusGetExp(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyStatusGetExp;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyStatusGetExp, Common.ReplyStatusGetExp);
}
public bool ReplyStatusGetLevel(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyStatusGetLevel;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyStatusGetLevel, Common.ReplyStatusGetLevel);
}

public bool ReplyStatusGetLevel(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyStatusGetLevel;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyStatusGetLevel, Common.ReplyStatusGetLevel);
}
public bool ReplyStatusAddStatPoint(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyStatusAddStatPoint;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyStatusAddStatPoint, Common.ReplyStatusAddStatPoint);
}

public bool ReplyStatusAddStatPoint(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyStatusAddStatPoint;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyStatusAddStatPoint, Common.ReplyStatusAddStatPoint);
}
public bool ReplyStatusAddSkillPoint(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyStatusAddSkillPoint;
		__msg.Write(__msgid);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyStatusAddSkillPoint, Common.ReplyStatusAddSkillPoint);
}

public bool ReplyStatusAddSkillPoint(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyStatusAddSkillPoint;
__msg.Write(__msgid);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyStatusAddSkillPoint, Common.ReplyStatusAddSkillPoint);
}
public bool ReplyStatusUseStatPoint(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyStatusUseStatPoint;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyStatusUseStatPoint, Common.ReplyStatusUseStatPoint);
}

public bool ReplyStatusUseStatPoint(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyStatusUseStatPoint;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyStatusUseStatPoint, Common.ReplyStatusUseStatPoint);
}
public bool ReplyStatusUseSkillPoint(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyStatusUseSkillPoint;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyStatusUseSkillPoint, Common.ReplyStatusUseSkillPoint);
}

public bool ReplyStatusUseSkillPoint(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyStatusUseSkillPoint;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyStatusUseSkillPoint, Common.ReplyStatusUseSkillPoint);
}
public bool ReplyDeleteQuickSlot(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyDeleteQuickSlot;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyDeleteQuickSlot, Common.ReplyDeleteQuickSlot);
}

public bool ReplyDeleteQuickSlot(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyDeleteQuickSlot;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyDeleteQuickSlot, Common.ReplyDeleteQuickSlot);
}
public bool ReplySetQuickSlot(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplySetQuickSlot;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplySetQuickSlot, Common.ReplySetQuickSlot);
}

public bool ReplySetQuickSlot(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplySetQuickSlot;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplySetQuickSlot, Common.ReplySetQuickSlot);
}
public bool ReplyGetCoupon(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.ReplyGetCoupon;
		__msg.Write(__msgid);
		Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_ReplyGetCoupon, Common.ReplyGetCoupon);
}

public bool ReplyGetCoupon(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
{
	Nettention.Proud.Message __msg=new Nettention.Proud.Message();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.ReplyGetCoupon;
__msg.Write(__msgid);
Arena_Server.Marshaler.Write(__msg, isSuccess);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_ReplyGetCoupon, Common.ReplyGetCoupon);
}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyItemBuy="ReplyItemBuy";
public const string RmiName_ReplyItemBuyNumber="ReplyItemBuyNumber";
public const string RmiName_ReplyItemUse="ReplyItemUse";
public const string RmiName_ReplyItemEquip="ReplyItemEquip";
public const string RmiName_ReplyItemUnEquip="ReplyItemUnEquip";
public const string RmiName_ReplyItemDelete="ReplyItemDelete";
public const string RmiName_ReplyItemDeleteNumber="ReplyItemDeleteNumber";
public const string RmiName_ReplyItemSell="ReplyItemSell";
public const string RmiName_ReplyItemSellNumber="ReplyItemSellNumber";
public const string RmiName_ReplyItemProduce="ReplyItemProduce";
public const string RmiName_ReplyInventorySort="ReplyInventorySort";
public const string RmiName_ReplyQuestAccept="ReplyQuestAccept";
public const string RmiName_ReplyQuestDelete="ReplyQuestDelete";
public const string RmiName_ReplyQuestClear="ReplyQuestClear";
public const string RmiName_ReplyStatusGetExp="ReplyStatusGetExp";
public const string RmiName_ReplyStatusGetLevel="ReplyStatusGetLevel";
public const string RmiName_ReplyStatusAddStatPoint="ReplyStatusAddStatPoint";
public const string RmiName_ReplyStatusAddSkillPoint="ReplyStatusAddSkillPoint";
public const string RmiName_ReplyStatusUseStatPoint="ReplyStatusUseStatPoint";
public const string RmiName_ReplyStatusUseSkillPoint="ReplyStatusUseSkillPoint";
public const string RmiName_ReplyDeleteQuickSlot="ReplyDeleteQuickSlot";
public const string RmiName_ReplySetQuickSlot="ReplySetQuickSlot";
public const string RmiName_ReplyGetCoupon="ReplyGetCoupon";
       
public const string RmiName_First = RmiName_ReplyItemBuy;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyItemBuy="";
public const string RmiName_ReplyItemBuyNumber="";
public const string RmiName_ReplyItemUse="";
public const string RmiName_ReplyItemEquip="";
public const string RmiName_ReplyItemUnEquip="";
public const string RmiName_ReplyItemDelete="";
public const string RmiName_ReplyItemDeleteNumber="";
public const string RmiName_ReplyItemSell="";
public const string RmiName_ReplyItemSellNumber="";
public const string RmiName_ReplyItemProduce="";
public const string RmiName_ReplyInventorySort="";
public const string RmiName_ReplyQuestAccept="";
public const string RmiName_ReplyQuestDelete="";
public const string RmiName_ReplyQuestClear="";
public const string RmiName_ReplyStatusGetExp="";
public const string RmiName_ReplyStatusGetLevel="";
public const string RmiName_ReplyStatusAddStatPoint="";
public const string RmiName_ReplyStatusAddSkillPoint="";
public const string RmiName_ReplyStatusUseStatPoint="";
public const string RmiName_ReplyStatusUseSkillPoint="";
public const string RmiName_ReplyDeleteQuickSlot="";
public const string RmiName_ReplySetQuickSlot="";
public const string RmiName_ReplyGetCoupon="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

