




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace DB_Account_S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReplyConnectServerDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isConnect, int hostID, string values);  
		public ReplyConnectServerDelegate ReplyConnectServer = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isConnect, int hostID, string values)
		{ 
			return false;
		};
		public delegate bool ReplyCreateCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isCreate, string values);  
		public ReplyCreateCharacterDelegate ReplyCreateCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isCreate, string values)
		{ 
			return false;
		};
		public delegate bool ReplyPlayerCharactersInformationDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string characterValues);  
		public ReplyPlayerCharactersInformationDelegate ReplyPlayerCharactersInformation = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string characterValues)
		{ 
			return false;
		};
		public delegate bool ReplyDeleteCharactersDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isDelete);  
		public ReplyDeleteCharactersDelegate ReplyDeleteCharacters = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isDelete)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReplyConnectServer:
            ProcessReceivedMessage_ReplyConnectServer(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyCreateCharacter:
            ProcessReceivedMessage_ReplyCreateCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyPlayerCharactersInformation:
            ProcessReceivedMessage_ReplyPlayerCharactersInformation(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyDeleteCharacters:
            ProcessReceivedMessage_ReplyDeleteCharacters(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReplyConnectServer(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isConnect; Arena_Server.Marshaler.Read(__msg,out isConnect);	
int hostID; Arena_Server.Marshaler.Read(__msg,out hostID);	
string values; Arena_Server.Marshaler.Read(__msg,out values);	
core.PostCheckReadMessage(__msg, RmiName_ReplyConnectServer);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isConnect.ToString()+",";
parameterString+=hostID.ToString()+",";
parameterString+=values.ToString()+",";
        NotifyCallFromStub(Common.ReplyConnectServer, RmiName_ReplyConnectServer,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyConnectServer;
        summary.rmiName = RmiName_ReplyConnectServer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyConnectServer (remote,ctx , isConnect, hostID, values );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyConnectServer);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyConnectServer;
        summary.rmiName = RmiName_ReplyConnectServer;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyCreateCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isCreate; Arena_Server.Marshaler.Read(__msg,out isCreate);	
string values; Arena_Server.Marshaler.Read(__msg,out values);	
core.PostCheckReadMessage(__msg, RmiName_ReplyCreateCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isCreate.ToString()+",";
parameterString+=values.ToString()+",";
        NotifyCallFromStub(Common.ReplyCreateCharacter, RmiName_ReplyCreateCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyCreateCharacter;
        summary.rmiName = RmiName_ReplyCreateCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyCreateCharacter (remote,ctx , isCreate, values );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyCreateCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyCreateCharacter;
        summary.rmiName = RmiName_ReplyCreateCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyPlayerCharactersInformation(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string characterValues; Arena_Server.Marshaler.Read(__msg,out characterValues);	
core.PostCheckReadMessage(__msg, RmiName_ReplyPlayerCharactersInformation);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=characterValues.ToString()+",";
        NotifyCallFromStub(Common.ReplyPlayerCharactersInformation, RmiName_ReplyPlayerCharactersInformation,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyPlayerCharactersInformation;
        summary.rmiName = RmiName_ReplyPlayerCharactersInformation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyPlayerCharactersInformation (remote,ctx , isSearch, characterValues );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyPlayerCharactersInformation);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyPlayerCharactersInformation;
        summary.rmiName = RmiName_ReplyPlayerCharactersInformation;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyDeleteCharacters(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isDelete; Arena_Server.Marshaler.Read(__msg,out isDelete);	
core.PostCheckReadMessage(__msg, RmiName_ReplyDeleteCharacters);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isDelete.ToString()+",";
        NotifyCallFromStub(Common.ReplyDeleteCharacters, RmiName_ReplyDeleteCharacters,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyDeleteCharacters;
        summary.rmiName = RmiName_ReplyDeleteCharacters;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyDeleteCharacters (remote,ctx , isDelete );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyDeleteCharacters);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyDeleteCharacters;
        summary.rmiName = RmiName_ReplyDeleteCharacters;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyConnectServer="ReplyConnectServer";
public const string RmiName_ReplyCreateCharacter="ReplyCreateCharacter";
public const string RmiName_ReplyPlayerCharactersInformation="ReplyPlayerCharactersInformation";
public const string RmiName_ReplyDeleteCharacters="ReplyDeleteCharacters";
       
public const string RmiName_First = RmiName_ReplyConnectServer;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyConnectServer="";
public const string RmiName_ReplyCreateCharacter="";
public const string RmiName_ReplyPlayerCharactersInformation="";
public const string RmiName_ReplyDeleteCharacters="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace DB_Information_S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReplyGetPlayerStorageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data);  
		public ReplyGetPlayerStorageDelegate ReplyGetPlayerStorage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
		{ 
			return false;
		};
		public delegate bool ReplyGetCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string infoData, string statusData, string equipData);  
		public ReplyGetCharacterDelegate ReplyGetCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string infoData, string statusData, string equipData)
		{ 
			return false;
		};
		public delegate bool ReplyGetCharacterEquipmentDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data);  
		public ReplyGetCharacterEquipmentDelegate ReplyGetCharacterEquipment = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
		{ 
			return false;
		};
		public delegate bool ReplyGetCharacterInventoryDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data);  
		public ReplyGetCharacterInventoryDelegate ReplyGetCharacterInventory = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
		{ 
			return false;
		};
		public delegate bool ReplyGetCharacterQuestDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data);  
		public ReplyGetCharacterQuestDelegate ReplyGetCharacterQuest = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
		{ 
			return false;
		};
		public delegate bool ReplyGetCharacterSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data);  
		public ReplyGetCharacterSkillDelegate ReplyGetCharacterSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
		{ 
			return false;
		};
		public delegate bool ReplyGetCharacterQuickSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data);  
		public ReplyGetCharacterQuickSlotDelegate ReplyGetCharacterQuickSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSearch, string data)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReplyGetPlayerStorage:
            ProcessReceivedMessage_ReplyGetPlayerStorage(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCharacter:
            ProcessReceivedMessage_ReplyGetCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCharacterEquipment:
            ProcessReceivedMessage_ReplyGetCharacterEquipment(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCharacterInventory:
            ProcessReceivedMessage_ReplyGetCharacterInventory(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCharacterQuest:
            ProcessReceivedMessage_ReplyGetCharacterQuest(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCharacterSkill:
            ProcessReceivedMessage_ReplyGetCharacterSkill(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCharacterQuickSlot:
            ProcessReceivedMessage_ReplyGetCharacterQuickSlot(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReplyGetPlayerStorage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string data; Arena_Server.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetPlayerStorage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetPlayerStorage, RmiName_ReplyGetPlayerStorage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetPlayerStorage;
        summary.rmiName = RmiName_ReplyGetPlayerStorage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetPlayerStorage (remote,ctx , isSearch, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetPlayerStorage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetPlayerStorage;
        summary.rmiName = RmiName_ReplyGetPlayerStorage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string infoData; Arena_Server.Marshaler.Read(__msg,out infoData);	
string statusData; Arena_Server.Marshaler.Read(__msg,out statusData);	
string equipData; Arena_Server.Marshaler.Read(__msg,out equipData);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=infoData.ToString()+",";
parameterString+=statusData.ToString()+",";
parameterString+=equipData.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCharacter, RmiName_ReplyGetCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCharacter;
        summary.rmiName = RmiName_ReplyGetCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCharacter (remote,ctx , isSearch, infoData, statusData, equipData );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCharacter;
        summary.rmiName = RmiName_ReplyGetCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCharacterEquipment(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string data; Arena_Server.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCharacterEquipment);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCharacterEquipment, RmiName_ReplyGetCharacterEquipment,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterEquipment;
        summary.rmiName = RmiName_ReplyGetCharacterEquipment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCharacterEquipment (remote,ctx , isSearch, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCharacterEquipment);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterEquipment;
        summary.rmiName = RmiName_ReplyGetCharacterEquipment;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCharacterInventory(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string data; Arena_Server.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCharacterInventory);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCharacterInventory, RmiName_ReplyGetCharacterInventory,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterInventory;
        summary.rmiName = RmiName_ReplyGetCharacterInventory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCharacterInventory (remote,ctx , isSearch, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCharacterInventory);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterInventory;
        summary.rmiName = RmiName_ReplyGetCharacterInventory;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCharacterQuest(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string data; Arena_Server.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCharacterQuest);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCharacterQuest, RmiName_ReplyGetCharacterQuest,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterQuest;
        summary.rmiName = RmiName_ReplyGetCharacterQuest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCharacterQuest (remote,ctx , isSearch, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCharacterQuest);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterQuest;
        summary.rmiName = RmiName_ReplyGetCharacterQuest;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCharacterSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string data; Arena_Server.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCharacterSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCharacterSkill, RmiName_ReplyGetCharacterSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterSkill;
        summary.rmiName = RmiName_ReplyGetCharacterSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCharacterSkill (remote,ctx , isSearch, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCharacterSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterSkill;
        summary.rmiName = RmiName_ReplyGetCharacterSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCharacterQuickSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSearch; Arena_Server.Marshaler.Read(__msg,out isSearch);	
string data; Arena_Server.Marshaler.Read(__msg,out data);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCharacterQuickSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSearch.ToString()+",";
parameterString+=data.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCharacterQuickSlot, RmiName_ReplyGetCharacterQuickSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterQuickSlot;
        summary.rmiName = RmiName_ReplyGetCharacterQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCharacterQuickSlot (remote,ctx , isSearch, data );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCharacterQuickSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCharacterQuickSlot;
        summary.rmiName = RmiName_ReplyGetCharacterQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyGetPlayerStorage="ReplyGetPlayerStorage";
public const string RmiName_ReplyGetCharacter="ReplyGetCharacter";
public const string RmiName_ReplyGetCharacterEquipment="ReplyGetCharacterEquipment";
public const string RmiName_ReplyGetCharacterInventory="ReplyGetCharacterInventory";
public const string RmiName_ReplyGetCharacterQuest="ReplyGetCharacterQuest";
public const string RmiName_ReplyGetCharacterSkill="ReplyGetCharacterSkill";
public const string RmiName_ReplyGetCharacterQuickSlot="ReplyGetCharacterQuickSlot";
       
public const string RmiName_First = RmiName_ReplyGetPlayerStorage;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyGetPlayerStorage="";
public const string RmiName_ReplyGetCharacter="";
public const string RmiName_ReplyGetCharacterEquipment="";
public const string RmiName_ReplyGetCharacterInventory="";
public const string RmiName_ReplyGetCharacterQuest="";
public const string RmiName_ReplyGetCharacterSkill="";
public const string RmiName_ReplyGetCharacterQuickSlot="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace DB_Alter_S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReplyItemBuyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemBuyDelegate ReplyItemBuy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemBuyNumberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemBuyNumberDelegate ReplyItemBuyNumber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemUseDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemUseDelegate ReplyItemUse = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemEquipDelegate ReplyItemEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemUnEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemUnEquipDelegate ReplyItemUnEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemDeleteDelegate ReplyItemDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemDeleteNumberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemDeleteNumberDelegate ReplyItemDeleteNumber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemSellDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemSellDelegate ReplyItemSell = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyItemSellNumberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyItemSellNumberDelegate ReplyItemSellNumber = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyInventorySortDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyInventorySortDelegate ReplyInventorySort = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyQuestAcceptDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyQuestAcceptDelegate ReplyQuestAccept = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyQuestDeleteDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyQuestDeleteDelegate ReplyQuestDelete = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyQuestClearDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyQuestClearDelegate ReplyQuestClear = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyStatusGetExpDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyStatusGetExpDelegate ReplyStatusGetExp = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyStatusGetLevelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyStatusGetLevelDelegate ReplyStatusGetLevel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyStatusAddStatPointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReplyStatusAddStatPointDelegate ReplyStatusAddStatPoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReplyStatusAddSkillPointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ReplyStatusAddSkillPointDelegate ReplyStatusAddSkillPoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool ReplyStatusUseStatPointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyStatusUseStatPointDelegate ReplyStatusUseStatPoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyStatusUseSkillPointDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyStatusUseSkillPointDelegate ReplyStatusUseSkillPoint = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyDeleteQuickSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyDeleteQuickSlotDelegate ReplyDeleteQuickSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplySetQuickSlotDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplySetQuickSlotDelegate ReplySetQuickSlot = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyGetCouponDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyGetCouponDelegate ReplyGetCoupon = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReplyItemBuy:
            ProcessReceivedMessage_ReplyItemBuy(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemBuyNumber:
            ProcessReceivedMessage_ReplyItemBuyNumber(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemUse:
            ProcessReceivedMessage_ReplyItemUse(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemEquip:
            ProcessReceivedMessage_ReplyItemEquip(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemUnEquip:
            ProcessReceivedMessage_ReplyItemUnEquip(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemDelete:
            ProcessReceivedMessage_ReplyItemDelete(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemDeleteNumber:
            ProcessReceivedMessage_ReplyItemDeleteNumber(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemSell:
            ProcessReceivedMessage_ReplyItemSell(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyItemSellNumber:
            ProcessReceivedMessage_ReplyItemSellNumber(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyInventorySort:
            ProcessReceivedMessage_ReplyInventorySort(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyQuestAccept:
            ProcessReceivedMessage_ReplyQuestAccept(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyQuestDelete:
            ProcessReceivedMessage_ReplyQuestDelete(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyQuestClear:
            ProcessReceivedMessage_ReplyQuestClear(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyStatusGetExp:
            ProcessReceivedMessage_ReplyStatusGetExp(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyStatusGetLevel:
            ProcessReceivedMessage_ReplyStatusGetLevel(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyStatusAddStatPoint:
            ProcessReceivedMessage_ReplyStatusAddStatPoint(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyStatusAddSkillPoint:
            ProcessReceivedMessage_ReplyStatusAddSkillPoint(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyStatusUseStatPoint:
            ProcessReceivedMessage_ReplyStatusUseStatPoint(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyStatusUseSkillPoint:
            ProcessReceivedMessage_ReplyStatusUseSkillPoint(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyDeleteQuickSlot:
            ProcessReceivedMessage_ReplyDeleteQuickSlot(__msg, pa, hostTag, remote);
            break;
        case Common.ReplySetQuickSlot:
            ProcessReceivedMessage_ReplySetQuickSlot(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyGetCoupon:
            ProcessReceivedMessage_ReplyGetCoupon(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReplyItemBuy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemBuy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemBuy, RmiName_ReplyItemBuy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemBuy;
        summary.rmiName = RmiName_ReplyItemBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemBuy (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemBuy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemBuy;
        summary.rmiName = RmiName_ReplyItemBuy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemBuyNumber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemBuyNumber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemBuyNumber, RmiName_ReplyItemBuyNumber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemBuyNumber;
        summary.rmiName = RmiName_ReplyItemBuyNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemBuyNumber (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemBuyNumber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemBuyNumber;
        summary.rmiName = RmiName_ReplyItemBuyNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemUse(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemUse);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemUse, RmiName_ReplyItemUse,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemUse;
        summary.rmiName = RmiName_ReplyItemUse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemUse (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemUse);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemUse;
        summary.rmiName = RmiName_ReplyItemUse;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemEquip, RmiName_ReplyItemEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemEquip;
        summary.rmiName = RmiName_ReplyItemEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemEquip (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemEquip;
        summary.rmiName = RmiName_ReplyItemEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemUnEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemUnEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemUnEquip, RmiName_ReplyItemUnEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemUnEquip;
        summary.rmiName = RmiName_ReplyItemUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemUnEquip (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemUnEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemUnEquip;
        summary.rmiName = RmiName_ReplyItemUnEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemDelete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemDelete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemDelete, RmiName_ReplyItemDelete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemDelete;
        summary.rmiName = RmiName_ReplyItemDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemDelete (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemDelete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemDelete;
        summary.rmiName = RmiName_ReplyItemDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemDeleteNumber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemDeleteNumber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemDeleteNumber, RmiName_ReplyItemDeleteNumber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemDeleteNumber;
        summary.rmiName = RmiName_ReplyItemDeleteNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemDeleteNumber (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemDeleteNumber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemDeleteNumber;
        summary.rmiName = RmiName_ReplyItemDeleteNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemSell(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemSell);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemSell, RmiName_ReplyItemSell,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemSell;
        summary.rmiName = RmiName_ReplyItemSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemSell (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemSell);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemSell;
        summary.rmiName = RmiName_ReplyItemSell;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyItemSellNumber(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyItemSellNumber);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyItemSellNumber, RmiName_ReplyItemSellNumber,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyItemSellNumber;
        summary.rmiName = RmiName_ReplyItemSellNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyItemSellNumber (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyItemSellNumber);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyItemSellNumber;
        summary.rmiName = RmiName_ReplyItemSellNumber;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyInventorySort(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyInventorySort);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyInventorySort, RmiName_ReplyInventorySort,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyInventorySort;
        summary.rmiName = RmiName_ReplyInventorySort;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyInventorySort (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyInventorySort);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyInventorySort;
        summary.rmiName = RmiName_ReplyInventorySort;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyQuestAccept(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyQuestAccept);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyQuestAccept, RmiName_ReplyQuestAccept,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyQuestAccept;
        summary.rmiName = RmiName_ReplyQuestAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyQuestAccept (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyQuestAccept);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyQuestAccept;
        summary.rmiName = RmiName_ReplyQuestAccept;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyQuestDelete(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyQuestDelete);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyQuestDelete, RmiName_ReplyQuestDelete,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyQuestDelete;
        summary.rmiName = RmiName_ReplyQuestDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyQuestDelete (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyQuestDelete);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyQuestDelete;
        summary.rmiName = RmiName_ReplyQuestDelete;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyQuestClear(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyQuestClear);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyQuestClear, RmiName_ReplyQuestClear,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyQuestClear;
        summary.rmiName = RmiName_ReplyQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyQuestClear (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyQuestClear);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyQuestClear;
        summary.rmiName = RmiName_ReplyQuestClear;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyStatusGetExp(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyStatusGetExp);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyStatusGetExp, RmiName_ReplyStatusGetExp,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyStatusGetExp;
        summary.rmiName = RmiName_ReplyStatusGetExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyStatusGetExp (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyStatusGetExp);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyStatusGetExp;
        summary.rmiName = RmiName_ReplyStatusGetExp;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyStatusGetLevel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyStatusGetLevel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyStatusGetLevel, RmiName_ReplyStatusGetLevel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyStatusGetLevel;
        summary.rmiName = RmiName_ReplyStatusGetLevel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyStatusGetLevel (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyStatusGetLevel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyStatusGetLevel;
        summary.rmiName = RmiName_ReplyStatusGetLevel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyStatusAddStatPoint(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReplyStatusAddStatPoint);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReplyStatusAddStatPoint, RmiName_ReplyStatusAddStatPoint,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyStatusAddStatPoint;
        summary.rmiName = RmiName_ReplyStatusAddStatPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyStatusAddStatPoint (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyStatusAddStatPoint);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyStatusAddStatPoint;
        summary.rmiName = RmiName_ReplyStatusAddStatPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyStatusAddSkillPoint(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ReplyStatusAddSkillPoint);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ReplyStatusAddSkillPoint, RmiName_ReplyStatusAddSkillPoint,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyStatusAddSkillPoint;
        summary.rmiName = RmiName_ReplyStatusAddSkillPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyStatusAddSkillPoint (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyStatusAddSkillPoint);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyStatusAddSkillPoint;
        summary.rmiName = RmiName_ReplyStatusAddSkillPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyStatusUseStatPoint(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyStatusUseStatPoint);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyStatusUseStatPoint, RmiName_ReplyStatusUseStatPoint,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyStatusUseStatPoint;
        summary.rmiName = RmiName_ReplyStatusUseStatPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyStatusUseStatPoint (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyStatusUseStatPoint);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyStatusUseStatPoint;
        summary.rmiName = RmiName_ReplyStatusUseStatPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyStatusUseSkillPoint(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyStatusUseSkillPoint);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyStatusUseSkillPoint, RmiName_ReplyStatusUseSkillPoint,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyStatusUseSkillPoint;
        summary.rmiName = RmiName_ReplyStatusUseSkillPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyStatusUseSkillPoint (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyStatusUseSkillPoint);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyStatusUseSkillPoint;
        summary.rmiName = RmiName_ReplyStatusUseSkillPoint;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyDeleteQuickSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyDeleteQuickSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyDeleteQuickSlot, RmiName_ReplyDeleteQuickSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyDeleteQuickSlot;
        summary.rmiName = RmiName_ReplyDeleteQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyDeleteQuickSlot (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyDeleteQuickSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyDeleteQuickSlot;
        summary.rmiName = RmiName_ReplyDeleteQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplySetQuickSlot(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplySetQuickSlot);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplySetQuickSlot, RmiName_ReplySetQuickSlot,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplySetQuickSlot;
        summary.rmiName = RmiName_ReplySetQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplySetQuickSlot (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplySetQuickSlot);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplySetQuickSlot;
        summary.rmiName = RmiName_ReplySetQuickSlot;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyGetCoupon(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyGetCoupon);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyGetCoupon, RmiName_ReplyGetCoupon,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyGetCoupon;
        summary.rmiName = RmiName_ReplyGetCoupon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyGetCoupon (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyGetCoupon);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyGetCoupon;
        summary.rmiName = RmiName_ReplyGetCoupon;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyItemBuy="ReplyItemBuy";
public const string RmiName_ReplyItemBuyNumber="ReplyItemBuyNumber";
public const string RmiName_ReplyItemUse="ReplyItemUse";
public const string RmiName_ReplyItemEquip="ReplyItemEquip";
public const string RmiName_ReplyItemUnEquip="ReplyItemUnEquip";
public const string RmiName_ReplyItemDelete="ReplyItemDelete";
public const string RmiName_ReplyItemDeleteNumber="ReplyItemDeleteNumber";
public const string RmiName_ReplyItemSell="ReplyItemSell";
public const string RmiName_ReplyItemSellNumber="ReplyItemSellNumber";
public const string RmiName_ReplyInventorySort="ReplyInventorySort";
public const string RmiName_ReplyQuestAccept="ReplyQuestAccept";
public const string RmiName_ReplyQuestDelete="ReplyQuestDelete";
public const string RmiName_ReplyQuestClear="ReplyQuestClear";
public const string RmiName_ReplyStatusGetExp="ReplyStatusGetExp";
public const string RmiName_ReplyStatusGetLevel="ReplyStatusGetLevel";
public const string RmiName_ReplyStatusAddStatPoint="ReplyStatusAddStatPoint";
public const string RmiName_ReplyStatusAddSkillPoint="ReplyStatusAddSkillPoint";
public const string RmiName_ReplyStatusUseStatPoint="ReplyStatusUseStatPoint";
public const string RmiName_ReplyStatusUseSkillPoint="ReplyStatusUseSkillPoint";
public const string RmiName_ReplyDeleteQuickSlot="ReplyDeleteQuickSlot";
public const string RmiName_ReplySetQuickSlot="ReplySetQuickSlot";
public const string RmiName_ReplyGetCoupon="ReplyGetCoupon";
       
public const string RmiName_First = RmiName_ReplyItemBuy;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyItemBuy="";
public const string RmiName_ReplyItemBuyNumber="";
public const string RmiName_ReplyItemUse="";
public const string RmiName_ReplyItemEquip="";
public const string RmiName_ReplyItemUnEquip="";
public const string RmiName_ReplyItemDelete="";
public const string RmiName_ReplyItemDeleteNumber="";
public const string RmiName_ReplyItemSell="";
public const string RmiName_ReplyItemSellNumber="";
public const string RmiName_ReplyInventorySort="";
public const string RmiName_ReplyQuestAccept="";
public const string RmiName_ReplyQuestDelete="";
public const string RmiName_ReplyQuestClear="";
public const string RmiName_ReplyStatusGetExp="";
public const string RmiName_ReplyStatusGetLevel="";
public const string RmiName_ReplyStatusAddStatPoint="";
public const string RmiName_ReplyStatusAddSkillPoint="";
public const string RmiName_ReplyStatusUseStatPoint="";
public const string RmiName_ReplyStatusUseSkillPoint="";
public const string RmiName_ReplyDeleteQuickSlot="";
public const string RmiName_ReplySetQuickSlot="";
public const string RmiName_ReplyGetCoupon="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

