




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Net_Contact_C2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool NotifyPlayerJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID, EAllyType type, string infoData, string statusData, string equipData, string skillData);  
		public NotifyPlayerJoinDelegate NotifyPlayerJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID, EAllyType type, string infoData, string statusData, string equipData, string skillData)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerInfoDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID, EAllyType type, string infoData, string statusData, string equipData, string skillData);  
		public NotifyPlayerInfoDelegate NotifyPlayerInfo = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID, EAllyType type, string infoData, string statusData, string equipData, string skillData)
		{ 
			return false;
		};
		public delegate bool NotifyPlayerExitDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID);  
		public NotifyPlayerExitDelegate NotifyPlayerExit = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int uniqueID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.NotifyPlayerJoin:
            ProcessReceivedMessage_NotifyPlayerJoin(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyPlayerInfo:
            ProcessReceivedMessage_NotifyPlayerInfo(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyPlayerExit:
            ProcessReceivedMessage_NotifyPlayerExit(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_NotifyPlayerJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
EAllyType type; Arena_Server.Marshaler.Read(__msg,out type);	
string infoData; Arena_Server.Marshaler.Read(__msg,out infoData);	
string statusData; Arena_Server.Marshaler.Read(__msg,out statusData);	
string equipData; Arena_Server.Marshaler.Read(__msg,out equipData);	
string skillData; Arena_Server.Marshaler.Read(__msg,out skillData);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=uniqueID.ToString()+",";
parameterString+=type.ToString()+",";
parameterString+=infoData.ToString()+",";
parameterString+=statusData.ToString()+",";
parameterString+=equipData.ToString()+",";
parameterString+=skillData.ToString()+",";
        NotifyCallFromStub(Common.NotifyPlayerJoin, RmiName_NotifyPlayerJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPlayerJoin;
        summary.rmiName = RmiName_NotifyPlayerJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPlayerJoin (remote,ctx , uniqueID, type, infoData, statusData, equipData, skillData );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPlayerJoin;
        summary.rmiName = RmiName_NotifyPlayerJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyPlayerInfo(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
EAllyType type; Arena_Server.Marshaler.Read(__msg,out type);	
string infoData; Arena_Server.Marshaler.Read(__msg,out infoData);	
string statusData; Arena_Server.Marshaler.Read(__msg,out statusData);	
string equipData; Arena_Server.Marshaler.Read(__msg,out equipData);	
string skillData; Arena_Server.Marshaler.Read(__msg,out skillData);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerInfo);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=uniqueID.ToString()+",";
parameterString+=type.ToString()+",";
parameterString+=infoData.ToString()+",";
parameterString+=statusData.ToString()+",";
parameterString+=equipData.ToString()+",";
parameterString+=skillData.ToString()+",";
        NotifyCallFromStub(Common.NotifyPlayerInfo, RmiName_NotifyPlayerInfo,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPlayerInfo;
        summary.rmiName = RmiName_NotifyPlayerInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPlayerInfo (remote,ctx , uniqueID, type, infoData, statusData, equipData, skillData );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerInfo);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPlayerInfo;
        summary.rmiName = RmiName_NotifyPlayerInfo;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyPlayerExit(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPlayerExit);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=uniqueID.ToString()+",";
        NotifyCallFromStub(Common.NotifyPlayerExit, RmiName_NotifyPlayerExit,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPlayerExit;
        summary.rmiName = RmiName_NotifyPlayerExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPlayerExit (remote,ctx , uniqueID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPlayerExit);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPlayerExit;
        summary.rmiName = RmiName_NotifyPlayerExit;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyPlayerJoin="NotifyPlayerJoin";
public const string RmiName_NotifyPlayerInfo="NotifyPlayerInfo";
public const string RmiName_NotifyPlayerExit="NotifyPlayerExit";
       
public const string RmiName_First = RmiName_NotifyPlayerJoin;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyPlayerJoin="";
public const string RmiName_NotifyPlayerInfo="";
public const string RmiName_NotifyPlayerExit="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace Net_Behavior_C2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool NotifyCharacterIdleDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyCharacterIdleDelegate NotifyCharacterIdle = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyCharacterMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, UnityEngine.Vector3 angle);  
		public NotifyCharacterMoveDelegate NotifyCharacterMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, UnityEngine.Vector3 angle)
		{ 
			return false;
		};
		public delegate bool NotifyCharacterMoveTargetDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string targetName);  
		public NotifyCharacterMoveTargetDelegate NotifyCharacterMoveTarget = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string targetName)
		{ 
			return false;
		};
		public delegate bool NotifyCharacterMovePositionDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, float distance);  
		public NotifyCharacterMovePositionDelegate NotifyCharacterMovePosition = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 pos, float distance)
		{ 
			return false;
		};
		public delegate bool NotifyCharacterAttackDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 dir);  
		public NotifyCharacterAttackDelegate NotifyCharacterAttack = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 dir)
		{ 
			return false;
		};
		public delegate bool NotifyCharacterSkillDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 dir, int skillHandle);  
		public NotifyCharacterSkillDelegate NotifyCharacterSkill = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 dir, int skillHandle)
		{ 
			return false;
		};
		public delegate bool NotifyCharacterSkillEndDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 dir, int skillHandle);  
		public NotifyCharacterSkillEndDelegate NotifyCharacterSkillEnd = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, UnityEngine.Vector3 dir, int skillHandle)
		{ 
			return false;
		};
		public delegate bool NotifyItemEquipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle);  
		public NotifyItemEquipDelegate NotifyItemEquip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int itemHandle)
		{ 
			return false;
		};
		public delegate bool NotifyItemUnequipDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EItemType itemType);  
		public NotifyItemUnequipDelegate NotifyItemUnequip = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EItemType itemType)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.NotifyCharacterIdle:
            ProcessReceivedMessage_NotifyCharacterIdle(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyCharacterMove:
            ProcessReceivedMessage_NotifyCharacterMove(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyCharacterMoveTarget:
            ProcessReceivedMessage_NotifyCharacterMoveTarget(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyCharacterMovePosition:
            ProcessReceivedMessage_NotifyCharacterMovePosition(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyCharacterAttack:
            ProcessReceivedMessage_NotifyCharacterAttack(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyCharacterSkill:
            ProcessReceivedMessage_NotifyCharacterSkill(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyCharacterSkillEnd:
            ProcessReceivedMessage_NotifyCharacterSkillEnd(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyItemEquip:
            ProcessReceivedMessage_NotifyItemEquip(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyItemUnequip:
            ProcessReceivedMessage_NotifyItemUnequip(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_NotifyCharacterIdle(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterIdle);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotifyCharacterIdle, RmiName_NotifyCharacterIdle,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterIdle;
        summary.rmiName = RmiName_NotifyCharacterIdle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterIdle (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterIdle);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterIdle;
        summary.rmiName = RmiName_NotifyCharacterIdle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyCharacterMove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
UnityEngine.Vector3 angle; Arena_Server.Marshaler.Read(__msg,out angle);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterMove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=pos.ToString()+",";
parameterString+=angle.ToString()+",";
        NotifyCallFromStub(Common.NotifyCharacterMove, RmiName_NotifyCharacterMove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterMove;
        summary.rmiName = RmiName_NotifyCharacterMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterMove (remote,ctx , pos, angle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterMove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterMove;
        summary.rmiName = RmiName_NotifyCharacterMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyCharacterMoveTarget(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string targetName; Arena_Server.Marshaler.Read(__msg,out targetName);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterMoveTarget);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=targetName.ToString()+",";
        NotifyCallFromStub(Common.NotifyCharacterMoveTarget, RmiName_NotifyCharacterMoveTarget,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterMoveTarget;
        summary.rmiName = RmiName_NotifyCharacterMoveTarget;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterMoveTarget (remote,ctx , targetName );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterMoveTarget);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterMoveTarget;
        summary.rmiName = RmiName_NotifyCharacterMoveTarget;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyCharacterMovePosition(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
float distance; Arena_Server.Marshaler.Read(__msg,out distance);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterMovePosition);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=pos.ToString()+",";
parameterString+=distance.ToString()+",";
        NotifyCallFromStub(Common.NotifyCharacterMovePosition, RmiName_NotifyCharacterMovePosition,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterMovePosition;
        summary.rmiName = RmiName_NotifyCharacterMovePosition;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterMovePosition (remote,ctx , pos, distance );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterMovePosition);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterMovePosition;
        summary.rmiName = RmiName_NotifyCharacterMovePosition;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyCharacterAttack(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        UnityEngine.Vector3 dir; Arena_Server.Marshaler.Read(__msg,out dir);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterAttack);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=dir.ToString()+",";
        NotifyCallFromStub(Common.NotifyCharacterAttack, RmiName_NotifyCharacterAttack,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterAttack;
        summary.rmiName = RmiName_NotifyCharacterAttack;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterAttack (remote,ctx , dir );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterAttack);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterAttack;
        summary.rmiName = RmiName_NotifyCharacterAttack;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyCharacterSkill(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        UnityEngine.Vector3 dir; Arena_Server.Marshaler.Read(__msg,out dir);	
int skillHandle; Arena_Server.Marshaler.Read(__msg,out skillHandle);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterSkill);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=dir.ToString()+",";
parameterString+=skillHandle.ToString()+",";
        NotifyCallFromStub(Common.NotifyCharacterSkill, RmiName_NotifyCharacterSkill,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterSkill;
        summary.rmiName = RmiName_NotifyCharacterSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterSkill (remote,ctx , dir, skillHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterSkill);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterSkill;
        summary.rmiName = RmiName_NotifyCharacterSkill;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyCharacterSkillEnd(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        UnityEngine.Vector3 dir; Arena_Server.Marshaler.Read(__msg,out dir);	
int skillHandle; Arena_Server.Marshaler.Read(__msg,out skillHandle);	
core.PostCheckReadMessage(__msg, RmiName_NotifyCharacterSkillEnd);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=dir.ToString()+",";
parameterString+=skillHandle.ToString()+",";
        NotifyCallFromStub(Common.NotifyCharacterSkillEnd, RmiName_NotifyCharacterSkillEnd,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyCharacterSkillEnd;
        summary.rmiName = RmiName_NotifyCharacterSkillEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyCharacterSkillEnd (remote,ctx , dir, skillHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyCharacterSkillEnd);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyCharacterSkillEnd;
        summary.rmiName = RmiName_NotifyCharacterSkillEnd;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyItemEquip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int itemHandle; Arena_Server.Marshaler.Read(__msg,out itemHandle);	
core.PostCheckReadMessage(__msg, RmiName_NotifyItemEquip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemHandle.ToString()+",";
        NotifyCallFromStub(Common.NotifyItemEquip, RmiName_NotifyItemEquip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyItemEquip;
        summary.rmiName = RmiName_NotifyItemEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyItemEquip (remote,ctx , itemHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyItemEquip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyItemEquip;
        summary.rmiName = RmiName_NotifyItemEquip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyItemUnequip(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        EItemType itemType; Arena_Server.Marshaler.Read(__msg,out itemType);	
core.PostCheckReadMessage(__msg, RmiName_NotifyItemUnequip);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=itemType.ToString()+",";
        NotifyCallFromStub(Common.NotifyItemUnequip, RmiName_NotifyItemUnequip,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyItemUnequip;
        summary.rmiName = RmiName_NotifyItemUnequip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyItemUnequip (remote,ctx , itemType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyItemUnequip);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyItemUnequip;
        summary.rmiName = RmiName_NotifyItemUnequip;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyCharacterIdle="NotifyCharacterIdle";
public const string RmiName_NotifyCharacterMove="NotifyCharacterMove";
public const string RmiName_NotifyCharacterMoveTarget="NotifyCharacterMoveTarget";
public const string RmiName_NotifyCharacterMovePosition="NotifyCharacterMovePosition";
public const string RmiName_NotifyCharacterAttack="NotifyCharacterAttack";
public const string RmiName_NotifyCharacterSkill="NotifyCharacterSkill";
public const string RmiName_NotifyCharacterSkillEnd="NotifyCharacterSkillEnd";
public const string RmiName_NotifyItemEquip="NotifyItemEquip";
public const string RmiName_NotifyItemUnequip="NotifyItemUnequip";
       
public const string RmiName_First = RmiName_NotifyCharacterIdle;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyCharacterIdle="";
public const string RmiName_NotifyCharacterMove="";
public const string RmiName_NotifyCharacterMoveTarget="";
public const string RmiName_NotifyCharacterMovePosition="";
public const string RmiName_NotifyCharacterAttack="";
public const string RmiName_NotifyCharacterSkill="";
public const string RmiName_NotifyCharacterSkillEnd="";
public const string RmiName_NotifyItemEquip="";
public const string RmiName_NotifyItemUnequip="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace Net_Status_C2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
       
public const string RmiName_First = "";
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace Net_Community_C2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool NotifyRequestJoinPrivateMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle);  
		public NotifyRequestJoinPrivateMapDelegate NotifyRequestJoinPrivateMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle)
		{ 
			return false;
		};
		public delegate bool NotifyReplyJoinPrivateMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isReady);  
		public NotifyReplyJoinPrivateMapDelegate NotifyReplyJoinPrivateMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isReady)
		{ 
			return false;
		};
		public delegate bool NotifyRequestJoinPrivatePortalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int portalNumber);  
		public NotifyRequestJoinPrivatePortalDelegate NotifyRequestJoinPrivatePortal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int portalNumber)
		{ 
			return false;
		};
		public delegate bool NotifyReplyJoinPrivatePortalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isReady);  
		public NotifyReplyJoinPrivatePortalDelegate NotifyReplyJoinPrivatePortal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isReady)
		{ 
			return false;
		};
		public delegate bool NotifyJoinPrivatePortalCancleDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyJoinPrivatePortalCancleDelegate NotifyJoinPrivatePortalCancle = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyRequestPartyListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public NotifyRequestPartyListDelegate NotifyRequestPartyList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool NotifyReplyPartyListDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, string name, Nettention.Proud.HostID id, int number, int currNumber, int level);  
		public NotifyReplyPartyListDelegate NotifyReplyPartyList = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, string name, Nettention.Proud.HostID id, int number, int currNumber, int level)
		{ 
			return false;
		};
		public delegate bool NotifySendChatDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string chat);  
		public NotifySendChatDelegate NotifySendChat = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string chat)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.NotifyRequestJoinPrivateMap:
            ProcessReceivedMessage_NotifyRequestJoinPrivateMap(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyReplyJoinPrivateMap:
            ProcessReceivedMessage_NotifyReplyJoinPrivateMap(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRequestJoinPrivatePortal:
            ProcessReceivedMessage_NotifyRequestJoinPrivatePortal(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyReplyJoinPrivatePortal:
            ProcessReceivedMessage_NotifyReplyJoinPrivatePortal(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyJoinPrivatePortalCancle:
            ProcessReceivedMessage_NotifyJoinPrivatePortalCancle(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRequestPartyList:
            ProcessReceivedMessage_NotifyRequestPartyList(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyReplyPartyList:
            ProcessReceivedMessage_NotifyReplyPartyList(__msg, pa, hostTag, remote);
            break;
        case Common.NotifySendChat:
            ProcessReceivedMessage_NotifySendChat(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_NotifyRequestJoinPrivateMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRequestJoinPrivateMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=mapHandle.ToString()+",";
        NotifyCallFromStub(Common.NotifyRequestJoinPrivateMap, RmiName_NotifyRequestJoinPrivateMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRequestJoinPrivateMap;
        summary.rmiName = RmiName_NotifyRequestJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRequestJoinPrivateMap (remote,ctx , mapHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRequestJoinPrivateMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRequestJoinPrivateMap;
        summary.rmiName = RmiName_NotifyRequestJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyReplyJoinPrivateMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isReady; Arena_Server.Marshaler.Read(__msg,out isReady);	
core.PostCheckReadMessage(__msg, RmiName_NotifyReplyJoinPrivateMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isReady.ToString()+",";
        NotifyCallFromStub(Common.NotifyReplyJoinPrivateMap, RmiName_NotifyReplyJoinPrivateMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyReplyJoinPrivateMap;
        summary.rmiName = RmiName_NotifyReplyJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyReplyJoinPrivateMap (remote,ctx , isReady );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyReplyJoinPrivateMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyReplyJoinPrivateMap;
        summary.rmiName = RmiName_NotifyReplyJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRequestJoinPrivatePortal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int portalNumber; Arena_Server.Marshaler.Read(__msg,out portalNumber);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRequestJoinPrivatePortal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=portalNumber.ToString()+",";
        NotifyCallFromStub(Common.NotifyRequestJoinPrivatePortal, RmiName_NotifyRequestJoinPrivatePortal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRequestJoinPrivatePortal;
        summary.rmiName = RmiName_NotifyRequestJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRequestJoinPrivatePortal (remote,ctx , portalNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRequestJoinPrivatePortal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRequestJoinPrivatePortal;
        summary.rmiName = RmiName_NotifyRequestJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyReplyJoinPrivatePortal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isReady; Arena_Server.Marshaler.Read(__msg,out isReady);	
core.PostCheckReadMessage(__msg, RmiName_NotifyReplyJoinPrivatePortal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isReady.ToString()+",";
        NotifyCallFromStub(Common.NotifyReplyJoinPrivatePortal, RmiName_NotifyReplyJoinPrivatePortal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyReplyJoinPrivatePortal;
        summary.rmiName = RmiName_NotifyReplyJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyReplyJoinPrivatePortal (remote,ctx , isReady );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyReplyJoinPrivatePortal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyReplyJoinPrivatePortal;
        summary.rmiName = RmiName_NotifyReplyJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyJoinPrivatePortalCancle(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotifyJoinPrivatePortalCancle);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotifyJoinPrivatePortalCancle, RmiName_NotifyJoinPrivatePortalCancle,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyJoinPrivatePortalCancle;
        summary.rmiName = RmiName_NotifyJoinPrivatePortalCancle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyJoinPrivatePortalCancle (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyJoinPrivatePortalCancle);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyJoinPrivatePortalCancle;
        summary.rmiName = RmiName_NotifyJoinPrivatePortalCancle;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRequestPartyList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_NotifyRequestPartyList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.NotifyRequestPartyList, RmiName_NotifyRequestPartyList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRequestPartyList;
        summary.rmiName = RmiName_NotifyRequestPartyList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRequestPartyList (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRequestPartyList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRequestPartyList;
        summary.rmiName = RmiName_NotifyRequestPartyList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyReplyPartyList(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
string name; Arena_Server.Marshaler.Read(__msg,out name);	
Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
int number; Arena_Server.Marshaler.Read(__msg,out number);	
int currNumber; Arena_Server.Marshaler.Read(__msg,out currNumber);	
int level; Arena_Server.Marshaler.Read(__msg,out level);	
core.PostCheckReadMessage(__msg, RmiName_NotifyReplyPartyList);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=handle.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=id.ToString()+",";
parameterString+=number.ToString()+",";
parameterString+=currNumber.ToString()+",";
parameterString+=level.ToString()+",";
        NotifyCallFromStub(Common.NotifyReplyPartyList, RmiName_NotifyReplyPartyList,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyReplyPartyList;
        summary.rmiName = RmiName_NotifyReplyPartyList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyReplyPartyList (remote,ctx , handle, name, id, number, currNumber, level );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyReplyPartyList);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyReplyPartyList;
        summary.rmiName = RmiName_NotifyReplyPartyList;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifySendChat(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string chat; Arena_Server.Marshaler.Read(__msg,out chat);	
core.PostCheckReadMessage(__msg, RmiName_NotifySendChat);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=chat.ToString()+",";
        NotifyCallFromStub(Common.NotifySendChat, RmiName_NotifySendChat,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifySendChat;
        summary.rmiName = RmiName_NotifySendChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifySendChat (remote,ctx , chat );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifySendChat);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifySendChat;
        summary.rmiName = RmiName_NotifySendChat;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyRequestJoinPrivateMap="NotifyRequestJoinPrivateMap";
public const string RmiName_NotifyReplyJoinPrivateMap="NotifyReplyJoinPrivateMap";
public const string RmiName_NotifyRequestJoinPrivatePortal="NotifyRequestJoinPrivatePortal";
public const string RmiName_NotifyReplyJoinPrivatePortal="NotifyReplyJoinPrivatePortal";
public const string RmiName_NotifyJoinPrivatePortalCancle="NotifyJoinPrivatePortalCancle";
public const string RmiName_NotifyRequestPartyList="NotifyRequestPartyList";
public const string RmiName_NotifyReplyPartyList="NotifyReplyPartyList";
public const string RmiName_NotifySendChat="NotifySendChat";
       
public const string RmiName_First = RmiName_NotifyRequestJoinPrivateMap;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_NotifyRequestJoinPrivateMap="";
public const string RmiName_NotifyReplyJoinPrivateMap="";
public const string RmiName_NotifyRequestJoinPrivatePortal="";
public const string RmiName_NotifyReplyJoinPrivatePortal="";
public const string RmiName_NotifyJoinPrivatePortalCancle="";
public const string RmiName_NotifyRequestPartyList="";
public const string RmiName_NotifyReplyPartyList="";
public const string RmiName_NotifySendChat="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

