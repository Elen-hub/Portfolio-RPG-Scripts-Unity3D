




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Net_Contact_C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestLoginCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name);  
		public RequestLoginCharacterDelegate RequestLoginCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name)
		{ 
			return false;
		};
		public delegate bool RequestLogoutCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestLogoutCharacterDelegate RequestLogoutCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestChangeChannelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int channel);  
		public RequestChangeChannelDelegate RequestChangeChannel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int channel)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestLoginCharacter:
            ProcessReceivedMessage_RequestLoginCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.RequestLogoutCharacter:
            ProcessReceivedMessage_RequestLogoutCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.RequestChangeChannel:
            ProcessReceivedMessage_RequestChangeChannel(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestLoginCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
core.PostCheckReadMessage(__msg, RmiName_RequestLoginCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
        NotifyCallFromStub(Common.RequestLoginCharacter, RmiName_RequestLoginCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestLoginCharacter;
        summary.rmiName = RmiName_RequestLoginCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestLoginCharacter (remote,ctx , name );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestLoginCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestLoginCharacter;
        summary.rmiName = RmiName_RequestLoginCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestLogoutCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestLogoutCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestLogoutCharacter, RmiName_RequestLogoutCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestLogoutCharacter;
        summary.rmiName = RmiName_RequestLogoutCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestLogoutCharacter (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestLogoutCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestLogoutCharacter;
        summary.rmiName = RmiName_RequestLogoutCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestChangeChannel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int channel; Arena_Server.Marshaler.Read(__msg,out channel);	
core.PostCheckReadMessage(__msg, RmiName_RequestChangeChannel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=channel.ToString()+",";
        NotifyCallFromStub(Common.RequestChangeChannel, RmiName_RequestChangeChannel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestChangeChannel;
        summary.rmiName = RmiName_RequestChangeChannel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestChangeChannel (remote,ctx , channel );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestChangeChannel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestChangeChannel;
        summary.rmiName = RmiName_RequestChangeChannel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestLoginCharacter="RequestLoginCharacter";
public const string RmiName_RequestLogoutCharacter="RequestLogoutCharacter";
public const string RmiName_RequestChangeChannel="RequestChangeChannel";
       
public const string RmiName_First = RmiName_RequestLoginCharacter;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestLoginCharacter="";
public const string RmiName_RequestLogoutCharacter="";
public const string RmiName_RequestChangeChannel="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace Net_Behavior_C2S
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool RequestCharacterJoinMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestCharacterJoinMapDelegate RequestCharacterJoinMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestCharacterJoinPublicPortalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle, int portalNumber);  
		public RequestCharacterJoinPublicPortalDelegate RequestCharacterJoinPublicPortal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle, int portalNumber)
		{ 
			return false;
		};
		public delegate bool RequestCharacterJoinPrivateMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle);  
		public RequestCharacterJoinPrivateMapDelegate RequestCharacterJoinPrivateMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle)
		{ 
			return false;
		};
		public delegate bool RequestCharacterJoinPrivatePortalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle, int portalNumber);  
		public RequestCharacterJoinPrivatePortalDelegate RequestCharacterJoinPrivatePortal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int mapHandle, int portalNumber)
		{ 
			return false;
		};
		public delegate bool RequestCharacterExitPrivateMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestCharacterExitPrivateMapDelegate RequestCharacterExitPrivateMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestPartyAppointHostDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id);  
		public RequestPartyAppointHostDelegate RequestPartyAppointHost = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id)
		{ 
			return false;
		};
		public delegate bool RequestPartyCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, int number, int level);  
		public RequestPartyCreateDelegate RequestPartyCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, string name, int number, int level)
		{ 
			return false;
		};
		public delegate bool RequestPartyJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle);  
		public RequestPartyJoinDelegate RequestPartyJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle)
		{ 
			return false;
		};
		public delegate bool RequestPartyLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RequestPartyLeaveDelegate RequestPartyLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RequestPartyMemberKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id);  
		public RequestPartyMemberKickDelegate RequestPartyMemberKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id)
		{ 
			return false;
		};
		public delegate bool RequestPartySetStateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EPartyState state);  
		public RequestPartySetStateDelegate RequestPartySetState = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, EPartyState state)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.RequestCharacterJoinMap:
            ProcessReceivedMessage_RequestCharacterJoinMap(__msg, pa, hostTag, remote);
            break;
        case Common.RequestCharacterJoinPublicPortal:
            ProcessReceivedMessage_RequestCharacterJoinPublicPortal(__msg, pa, hostTag, remote);
            break;
        case Common.RequestCharacterJoinPrivateMap:
            ProcessReceivedMessage_RequestCharacterJoinPrivateMap(__msg, pa, hostTag, remote);
            break;
        case Common.RequestCharacterJoinPrivatePortal:
            ProcessReceivedMessage_RequestCharacterJoinPrivatePortal(__msg, pa, hostTag, remote);
            break;
        case Common.RequestCharacterExitPrivateMap:
            ProcessReceivedMessage_RequestCharacterExitPrivateMap(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPartyAppointHost:
            ProcessReceivedMessage_RequestPartyAppointHost(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPartyCreate:
            ProcessReceivedMessage_RequestPartyCreate(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPartyJoin:
            ProcessReceivedMessage_RequestPartyJoin(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPartyLeave:
            ProcessReceivedMessage_RequestPartyLeave(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPartyMemberKick:
            ProcessReceivedMessage_RequestPartyMemberKick(__msg, pa, hostTag, remote);
            break;
        case Common.RequestPartySetState:
            ProcessReceivedMessage_RequestPartySetState(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_RequestCharacterJoinMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestCharacterJoinMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestCharacterJoinMap, RmiName_RequestCharacterJoinMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinMap;
        summary.rmiName = RmiName_RequestCharacterJoinMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestCharacterJoinMap (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestCharacterJoinMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinMap;
        summary.rmiName = RmiName_RequestCharacterJoinMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestCharacterJoinPublicPortal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
int portalNumber; Arena_Server.Marshaler.Read(__msg,out portalNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestCharacterJoinPublicPortal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=mapHandle.ToString()+",";
parameterString+=portalNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestCharacterJoinPublicPortal, RmiName_RequestCharacterJoinPublicPortal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinPublicPortal;
        summary.rmiName = RmiName_RequestCharacterJoinPublicPortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestCharacterJoinPublicPortal (remote,ctx , mapHandle, portalNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestCharacterJoinPublicPortal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinPublicPortal;
        summary.rmiName = RmiName_RequestCharacterJoinPublicPortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestCharacterJoinPrivateMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
core.PostCheckReadMessage(__msg, RmiName_RequestCharacterJoinPrivateMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=mapHandle.ToString()+",";
        NotifyCallFromStub(Common.RequestCharacterJoinPrivateMap, RmiName_RequestCharacterJoinPrivateMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinPrivateMap;
        summary.rmiName = RmiName_RequestCharacterJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestCharacterJoinPrivateMap (remote,ctx , mapHandle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestCharacterJoinPrivateMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinPrivateMap;
        summary.rmiName = RmiName_RequestCharacterJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestCharacterJoinPrivatePortal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
int portalNumber; Arena_Server.Marshaler.Read(__msg,out portalNumber);	
core.PostCheckReadMessage(__msg, RmiName_RequestCharacterJoinPrivatePortal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=mapHandle.ToString()+",";
parameterString+=portalNumber.ToString()+",";
        NotifyCallFromStub(Common.RequestCharacterJoinPrivatePortal, RmiName_RequestCharacterJoinPrivatePortal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinPrivatePortal;
        summary.rmiName = RmiName_RequestCharacterJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestCharacterJoinPrivatePortal (remote,ctx , mapHandle, portalNumber );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestCharacterJoinPrivatePortal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestCharacterJoinPrivatePortal;
        summary.rmiName = RmiName_RequestCharacterJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestCharacterExitPrivateMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestCharacterExitPrivateMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestCharacterExitPrivateMap, RmiName_RequestCharacterExitPrivateMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestCharacterExitPrivateMap;
        summary.rmiName = RmiName_RequestCharacterExitPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestCharacterExitPrivateMap (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestCharacterExitPrivateMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestCharacterExitPrivateMap;
        summary.rmiName = RmiName_RequestCharacterExitPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPartyAppointHost(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestPartyAppointHost);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.RequestPartyAppointHost, RmiName_RequestPartyAppointHost,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPartyAppointHost;
        summary.rmiName = RmiName_RequestPartyAppointHost;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPartyAppointHost (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPartyAppointHost);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPartyAppointHost;
        summary.rmiName = RmiName_RequestPartyAppointHost;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPartyCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        string name; Arena_Server.Marshaler.Read(__msg,out name);	
int number; Arena_Server.Marshaler.Read(__msg,out number);	
int level; Arena_Server.Marshaler.Read(__msg,out level);	
core.PostCheckReadMessage(__msg, RmiName_RequestPartyCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=name.ToString()+",";
parameterString+=number.ToString()+",";
parameterString+=level.ToString()+",";
        NotifyCallFromStub(Common.RequestPartyCreate, RmiName_RequestPartyCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPartyCreate;
        summary.rmiName = RmiName_RequestPartyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPartyCreate (remote,ctx , name, number, level );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPartyCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPartyCreate;
        summary.rmiName = RmiName_RequestPartyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPartyJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
core.PostCheckReadMessage(__msg, RmiName_RequestPartyJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=handle.ToString()+",";
        NotifyCallFromStub(Common.RequestPartyJoin, RmiName_RequestPartyJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPartyJoin;
        summary.rmiName = RmiName_RequestPartyJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPartyJoin (remote,ctx , handle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPartyJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPartyJoin;
        summary.rmiName = RmiName_RequestPartyJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPartyLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RequestPartyLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RequestPartyLeave, RmiName_RequestPartyLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPartyLeave;
        summary.rmiName = RmiName_RequestPartyLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPartyLeave (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPartyLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPartyLeave;
        summary.rmiName = RmiName_RequestPartyLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPartyMemberKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_RequestPartyMemberKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.RequestPartyMemberKick, RmiName_RequestPartyMemberKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPartyMemberKick;
        summary.rmiName = RmiName_RequestPartyMemberKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPartyMemberKick (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPartyMemberKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPartyMemberKick;
        summary.rmiName = RmiName_RequestPartyMemberKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RequestPartySetState(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        EPartyState state; Arena_Server.Marshaler.Read(__msg,out state);	
core.PostCheckReadMessage(__msg, RmiName_RequestPartySetState);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=state.ToString()+",";
        NotifyCallFromStub(Common.RequestPartySetState, RmiName_RequestPartySetState,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RequestPartySetState;
        summary.rmiName = RmiName_RequestPartySetState;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RequestPartySetState (remote,ctx , state );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RequestPartySetState);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RequestPartySetState;
        summary.rmiName = RmiName_RequestPartySetState;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestCharacterJoinMap="RequestCharacterJoinMap";
public const string RmiName_RequestCharacterJoinPublicPortal="RequestCharacterJoinPublicPortal";
public const string RmiName_RequestCharacterJoinPrivateMap="RequestCharacterJoinPrivateMap";
public const string RmiName_RequestCharacterJoinPrivatePortal="RequestCharacterJoinPrivatePortal";
public const string RmiName_RequestCharacterExitPrivateMap="RequestCharacterExitPrivateMap";
public const string RmiName_RequestPartyAppointHost="RequestPartyAppointHost";
public const string RmiName_RequestPartyCreate="RequestPartyCreate";
public const string RmiName_RequestPartyJoin="RequestPartyJoin";
public const string RmiName_RequestPartyLeave="RequestPartyLeave";
public const string RmiName_RequestPartyMemberKick="RequestPartyMemberKick";
public const string RmiName_RequestPartySetState="RequestPartySetState";
       
public const string RmiName_First = RmiName_RequestCharacterJoinMap;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_RequestCharacterJoinMap="";
public const string RmiName_RequestCharacterJoinPublicPortal="";
public const string RmiName_RequestCharacterJoinPrivateMap="";
public const string RmiName_RequestCharacterJoinPrivatePortal="";
public const string RmiName_RequestCharacterExitPrivateMap="";
public const string RmiName_RequestPartyAppointHost="";
public const string RmiName_RequestPartyCreate="";
public const string RmiName_RequestPartyJoin="";
public const string RmiName_RequestPartyLeave="";
public const string RmiName_RequestPartyMemberKick="";
public const string RmiName_RequestPartySetState="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

