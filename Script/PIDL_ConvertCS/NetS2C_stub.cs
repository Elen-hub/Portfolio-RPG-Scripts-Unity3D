




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Net_Contact_S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReplyLoginCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isContact);  
		public ReplyLoginCharacterDelegate ReplyLoginCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isContact)
		{ 
			return false;
		};
		public delegate bool ReplyLogoutCharacterDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isDiscontact);  
		public ReplyLogoutCharacterDelegate ReplyLogoutCharacter = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isDiscontact)
		{ 
			return false;
		};
		public delegate bool ReplyChangeChannelDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isChange, Nettention.Proud.HostID groupID);  
		public ReplyChangeChannelDelegate ReplyChangeChannel = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isChange, Nettention.Proud.HostID groupID)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReplyLoginCharacter:
            ProcessReceivedMessage_ReplyLoginCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyLogoutCharacter:
            ProcessReceivedMessage_ReplyLogoutCharacter(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyChangeChannel:
            ProcessReceivedMessage_ReplyChangeChannel(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReplyLoginCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isContact; Arena_Server.Marshaler.Read(__msg,out isContact);	
core.PostCheckReadMessage(__msg, RmiName_ReplyLoginCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isContact.ToString()+",";
        NotifyCallFromStub(Common.ReplyLoginCharacter, RmiName_ReplyLoginCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyLoginCharacter;
        summary.rmiName = RmiName_ReplyLoginCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyLoginCharacter (remote,ctx , isContact );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyLoginCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyLoginCharacter;
        summary.rmiName = RmiName_ReplyLoginCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyLogoutCharacter(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isDiscontact; Arena_Server.Marshaler.Read(__msg,out isDiscontact);	
core.PostCheckReadMessage(__msg, RmiName_ReplyLogoutCharacter);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isDiscontact.ToString()+",";
        NotifyCallFromStub(Common.ReplyLogoutCharacter, RmiName_ReplyLogoutCharacter,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyLogoutCharacter;
        summary.rmiName = RmiName_ReplyLogoutCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyLogoutCharacter (remote,ctx , isDiscontact );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyLogoutCharacter);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyLogoutCharacter;
        summary.rmiName = RmiName_ReplyLogoutCharacter;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyChangeChannel(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isChange; Arena_Server.Marshaler.Read(__msg,out isChange);	
Nettention.Proud.HostID groupID; Arena_Server.Marshaler.Read(__msg,out groupID);	
core.PostCheckReadMessage(__msg, RmiName_ReplyChangeChannel);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isChange.ToString()+",";
parameterString+=groupID.ToString()+",";
        NotifyCallFromStub(Common.ReplyChangeChannel, RmiName_ReplyChangeChannel,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyChangeChannel;
        summary.rmiName = RmiName_ReplyChangeChannel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyChangeChannel (remote,ctx , isChange, groupID );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyChangeChannel);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyChangeChannel;
        summary.rmiName = RmiName_ReplyChangeChannel;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyLoginCharacter="ReplyLoginCharacter";
public const string RmiName_ReplyLogoutCharacter="ReplyLogoutCharacter";
public const string RmiName_ReplyChangeChannel="ReplyChangeChannel";
       
public const string RmiName_First = RmiName_ReplyLoginCharacter;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyLoginCharacter="";
public const string RmiName_ReplyLogoutCharacter="";
public const string RmiName_ReplyChangeChannel="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}
namespace Net_Behavior_S2C
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool ReplyCharacterJoinMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos);  
		public ReplyCharacterJoinMapDelegate ReplyCharacterJoinMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos)
		{ 
			return false;
		};
		public delegate bool ReplyCharacterJoinPublicPortalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos);  
		public ReplyCharacterJoinPublicPortalDelegate ReplyCharacterJoinPublicPortal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos)
		{ 
			return false;
		};
		public delegate bool ReplyCharacterJoinPrivateMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos, string enermyData);  
		public ReplyCharacterJoinPrivateMapDelegate ReplyCharacterJoinPrivateMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos, string enermyData)
		{ 
			return false;
		};
		public delegate bool ReplyCharacterJoinPrivatePortalDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, UnityEngine.Vector3 pos, string enermyData);  
		public ReplyCharacterJoinPrivatePortalDelegate ReplyCharacterJoinPrivatePortal = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, UnityEngine.Vector3 pos, string enermyData)
		{ 
			return false;
		};
		public delegate bool ReplyCharacterExitPrivateMapDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos);  
		public ReplyCharacterExitPrivateMapDelegate ReplyCharacterExitPrivateMap = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, Nettention.Proud.HostID groupID, int uniqueID, int channel, int mapHandle, UnityEngine.Vector3 pos)
		{ 
			return false;
		};
		public delegate bool ReplyPartyCreateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int handle);  
		public ReplyPartyCreateDelegate ReplyPartyCreate = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, int handle)
		{ 
			return false;
		};
		public delegate bool ReplyPartyJoinDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, string name, Nettention.Proud.HostID id, int number, int level, string members);  
		public ReplyPartyJoinDelegate ReplyPartyJoin = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess, string name, Nettention.Proud.HostID id, int number, int level, string members)
		{ 
			return false;
		};
		public delegate bool ReplyPartyLeaveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyPartyLeaveDelegate ReplyPartyLeave = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool ReplyPartySetStateDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess);  
		public ReplyPartySetStateDelegate ReplyPartySetState = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, bool isSuccess)
		{ 
			return false;
		};
		public delegate bool NotifyPartyAppointHostDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id);  
		public NotifyPartyAppointHostDelegate NotifyPartyAppointHost = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id)
		{ 
			return false;
		};
		public delegate bool NotifyPartyJoinMemberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id, string name, int handle, int level);  
		public NotifyPartyJoinMemberDelegate NotifyPartyJoinMember = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id, string name, int handle, int level)
		{ 
			return false;
		};
		public delegate bool NotifyPartyLeaveMemberDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id);  
		public NotifyPartyLeaveMemberDelegate NotifyPartyLeaveMember = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id)
		{ 
			return false;
		};
		public delegate bool NotifyPartyMemberKickDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id);  
		public NotifyPartyMemberKickDelegate NotifyPartyMemberKick = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, Nettention.Proud.HostID id)
		{ 
			return false;
		};
		public delegate bool NotifyRespawnEnermyDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, int uniqueID, UnityEngine.Vector3 pos, float angle, float respawnTime);  
		public NotifyRespawnEnermyDelegate NotifyRespawnEnermy = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int handle, int uniqueID, UnityEngine.Vector3 pos, float angle, float respawnTime)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.ReplyCharacterJoinMap:
            ProcessReceivedMessage_ReplyCharacterJoinMap(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyCharacterJoinPublicPortal:
            ProcessReceivedMessage_ReplyCharacterJoinPublicPortal(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyCharacterJoinPrivateMap:
            ProcessReceivedMessage_ReplyCharacterJoinPrivateMap(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyCharacterJoinPrivatePortal:
            ProcessReceivedMessage_ReplyCharacterJoinPrivatePortal(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyCharacterExitPrivateMap:
            ProcessReceivedMessage_ReplyCharacterExitPrivateMap(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyPartyCreate:
            ProcessReceivedMessage_ReplyPartyCreate(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyPartyJoin:
            ProcessReceivedMessage_ReplyPartyJoin(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyPartyLeave:
            ProcessReceivedMessage_ReplyPartyLeave(__msg, pa, hostTag, remote);
            break;
        case Common.ReplyPartySetState:
            ProcessReceivedMessage_ReplyPartySetState(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyPartyAppointHost:
            ProcessReceivedMessage_NotifyPartyAppointHost(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyPartyJoinMember:
            ProcessReceivedMessage_NotifyPartyJoinMember(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyPartyLeaveMember:
            ProcessReceivedMessage_NotifyPartyLeaveMember(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyPartyMemberKick:
            ProcessReceivedMessage_NotifyPartyMemberKick(__msg, pa, hostTag, remote);
            break;
        case Common.NotifyRespawnEnermy:
            ProcessReceivedMessage_NotifyRespawnEnermy(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_ReplyCharacterJoinMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
Nettention.Proud.HostID groupID; Arena_Server.Marshaler.Read(__msg,out groupID);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int channel; Arena_Server.Marshaler.Read(__msg,out channel);	
int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
core.PostCheckReadMessage(__msg, RmiName_ReplyCharacterJoinMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=groupID.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=channel.ToString()+",";
parameterString+=mapHandle.ToString()+",";
parameterString+=pos.ToString()+",";
        NotifyCallFromStub(Common.ReplyCharacterJoinMap, RmiName_ReplyCharacterJoinMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinMap;
        summary.rmiName = RmiName_ReplyCharacterJoinMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyCharacterJoinMap (remote,ctx , isSuccess, groupID, uniqueID, channel, mapHandle, pos );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyCharacterJoinMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinMap;
        summary.rmiName = RmiName_ReplyCharacterJoinMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyCharacterJoinPublicPortal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
Nettention.Proud.HostID groupID; Arena_Server.Marshaler.Read(__msg,out groupID);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int channel; Arena_Server.Marshaler.Read(__msg,out channel);	
int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
core.PostCheckReadMessage(__msg, RmiName_ReplyCharacterJoinPublicPortal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=groupID.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=channel.ToString()+",";
parameterString+=mapHandle.ToString()+",";
parameterString+=pos.ToString()+",";
        NotifyCallFromStub(Common.ReplyCharacterJoinPublicPortal, RmiName_ReplyCharacterJoinPublicPortal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinPublicPortal;
        summary.rmiName = RmiName_ReplyCharacterJoinPublicPortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyCharacterJoinPublicPortal (remote,ctx , isSuccess, groupID, uniqueID, channel, mapHandle, pos );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyCharacterJoinPublicPortal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinPublicPortal;
        summary.rmiName = RmiName_ReplyCharacterJoinPublicPortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyCharacterJoinPrivateMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
Nettention.Proud.HostID groupID; Arena_Server.Marshaler.Read(__msg,out groupID);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int channel; Arena_Server.Marshaler.Read(__msg,out channel);	
int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
string enermyData; Arena_Server.Marshaler.Read(__msg,out enermyData);	
core.PostCheckReadMessage(__msg, RmiName_ReplyCharacterJoinPrivateMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=groupID.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=channel.ToString()+",";
parameterString+=mapHandle.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=enermyData.ToString()+",";
        NotifyCallFromStub(Common.ReplyCharacterJoinPrivateMap, RmiName_ReplyCharacterJoinPrivateMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinPrivateMap;
        summary.rmiName = RmiName_ReplyCharacterJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyCharacterJoinPrivateMap (remote,ctx , isSuccess, groupID, uniqueID, channel, mapHandle, pos, enermyData );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyCharacterJoinPrivateMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinPrivateMap;
        summary.rmiName = RmiName_ReplyCharacterJoinPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyCharacterJoinPrivatePortal(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
Nettention.Proud.HostID groupID; Arena_Server.Marshaler.Read(__msg,out groupID);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int channel; Arena_Server.Marshaler.Read(__msg,out channel);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
string enermyData; Arena_Server.Marshaler.Read(__msg,out enermyData);	
core.PostCheckReadMessage(__msg, RmiName_ReplyCharacterJoinPrivatePortal);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=groupID.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=channel.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=enermyData.ToString()+",";
        NotifyCallFromStub(Common.ReplyCharacterJoinPrivatePortal, RmiName_ReplyCharacterJoinPrivatePortal,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinPrivatePortal;
        summary.rmiName = RmiName_ReplyCharacterJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyCharacterJoinPrivatePortal (remote,ctx , isSuccess, groupID, uniqueID, channel, pos, enermyData );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyCharacterJoinPrivatePortal);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyCharacterJoinPrivatePortal;
        summary.rmiName = RmiName_ReplyCharacterJoinPrivatePortal;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyCharacterExitPrivateMap(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
Nettention.Proud.HostID groupID; Arena_Server.Marshaler.Read(__msg,out groupID);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
int channel; Arena_Server.Marshaler.Read(__msg,out channel);	
int mapHandle; Arena_Server.Marshaler.Read(__msg,out mapHandle);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
core.PostCheckReadMessage(__msg, RmiName_ReplyCharacterExitPrivateMap);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=groupID.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=channel.ToString()+",";
parameterString+=mapHandle.ToString()+",";
parameterString+=pos.ToString()+",";
        NotifyCallFromStub(Common.ReplyCharacterExitPrivateMap, RmiName_ReplyCharacterExitPrivateMap,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyCharacterExitPrivateMap;
        summary.rmiName = RmiName_ReplyCharacterExitPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyCharacterExitPrivateMap (remote,ctx , isSuccess, groupID, uniqueID, channel, mapHandle, pos );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyCharacterExitPrivateMap);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyCharacterExitPrivateMap;
        summary.rmiName = RmiName_ReplyCharacterExitPrivateMap;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyPartyCreate(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
core.PostCheckReadMessage(__msg, RmiName_ReplyPartyCreate);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=handle.ToString()+",";
        NotifyCallFromStub(Common.ReplyPartyCreate, RmiName_ReplyPartyCreate,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyPartyCreate;
        summary.rmiName = RmiName_ReplyPartyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyPartyCreate (remote,ctx , isSuccess, handle );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyPartyCreate);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyPartyCreate;
        summary.rmiName = RmiName_ReplyPartyCreate;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyPartyJoin(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
string name; Arena_Server.Marshaler.Read(__msg,out name);	
Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
int number; Arena_Server.Marshaler.Read(__msg,out number);	
int level; Arena_Server.Marshaler.Read(__msg,out level);	
string members; Arena_Server.Marshaler.Read(__msg,out members);	
core.PostCheckReadMessage(__msg, RmiName_ReplyPartyJoin);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=id.ToString()+",";
parameterString+=number.ToString()+",";
parameterString+=level.ToString()+",";
parameterString+=members.ToString()+",";
        NotifyCallFromStub(Common.ReplyPartyJoin, RmiName_ReplyPartyJoin,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyPartyJoin;
        summary.rmiName = RmiName_ReplyPartyJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyPartyJoin (remote,ctx , isSuccess, name, id, number, level, members );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyPartyJoin);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyPartyJoin;
        summary.rmiName = RmiName_ReplyPartyJoin;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyPartyLeave(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyPartyLeave);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyPartyLeave, RmiName_ReplyPartyLeave,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyPartyLeave;
        summary.rmiName = RmiName_ReplyPartyLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyPartyLeave (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyPartyLeave);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyPartyLeave;
        summary.rmiName = RmiName_ReplyPartyLeave;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReplyPartySetState(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        bool isSuccess; Arena_Server.Marshaler.Read(__msg,out isSuccess);	
core.PostCheckReadMessage(__msg, RmiName_ReplyPartySetState);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=isSuccess.ToString()+",";
        NotifyCallFromStub(Common.ReplyPartySetState, RmiName_ReplyPartySetState,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReplyPartySetState;
        summary.rmiName = RmiName_ReplyPartySetState;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReplyPartySetState (remote,ctx , isSuccess );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReplyPartySetState);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReplyPartySetState;
        summary.rmiName = RmiName_ReplyPartySetState;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyPartyAppointHost(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPartyAppointHost);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.NotifyPartyAppointHost, RmiName_NotifyPartyAppointHost,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPartyAppointHost;
        summary.rmiName = RmiName_NotifyPartyAppointHost;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPartyAppointHost (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPartyAppointHost);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPartyAppointHost;
        summary.rmiName = RmiName_NotifyPartyAppointHost;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyPartyJoinMember(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
string name; Arena_Server.Marshaler.Read(__msg,out name);	
int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
int level; Arena_Server.Marshaler.Read(__msg,out level);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPartyJoinMember);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
parameterString+=name.ToString()+",";
parameterString+=handle.ToString()+",";
parameterString+=level.ToString()+",";
        NotifyCallFromStub(Common.NotifyPartyJoinMember, RmiName_NotifyPartyJoinMember,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPartyJoinMember;
        summary.rmiName = RmiName_NotifyPartyJoinMember;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPartyJoinMember (remote,ctx , id, name, handle, level );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPartyJoinMember);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPartyJoinMember;
        summary.rmiName = RmiName_NotifyPartyJoinMember;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyPartyLeaveMember(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPartyLeaveMember);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.NotifyPartyLeaveMember, RmiName_NotifyPartyLeaveMember,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPartyLeaveMember;
        summary.rmiName = RmiName_NotifyPartyLeaveMember;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPartyLeaveMember (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPartyLeaveMember);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPartyLeaveMember;
        summary.rmiName = RmiName_NotifyPartyLeaveMember;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyPartyMemberKick(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        Nettention.Proud.HostID id; Arena_Server.Marshaler.Read(__msg,out id);	
core.PostCheckReadMessage(__msg, RmiName_NotifyPartyMemberKick);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=id.ToString()+",";
        NotifyCallFromStub(Common.NotifyPartyMemberKick, RmiName_NotifyPartyMemberKick,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyPartyMemberKick;
        summary.rmiName = RmiName_NotifyPartyMemberKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyPartyMemberKick (remote,ctx , id );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyPartyMemberKick);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyPartyMemberKick;
        summary.rmiName = RmiName_NotifyPartyMemberKick;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_NotifyRespawnEnermy(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int handle; Arena_Server.Marshaler.Read(__msg,out handle);	
int uniqueID; Arena_Server.Marshaler.Read(__msg,out uniqueID);	
UnityEngine.Vector3 pos; Arena_Server.Marshaler.Read(__msg,out pos);	
float angle; Arena_Server.Marshaler.Read(__msg,out angle);	
float respawnTime; Arena_Server.Marshaler.Read(__msg,out respawnTime);	
core.PostCheckReadMessage(__msg, RmiName_NotifyRespawnEnermy);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=handle.ToString()+",";
parameterString+=uniqueID.ToString()+",";
parameterString+=pos.ToString()+",";
parameterString+=angle.ToString()+",";
parameterString+=respawnTime.ToString()+",";
        NotifyCallFromStub(Common.NotifyRespawnEnermy, RmiName_NotifyRespawnEnermy,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.NotifyRespawnEnermy;
        summary.rmiName = RmiName_NotifyRespawnEnermy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =NotifyRespawnEnermy (remote,ctx , handle, uniqueID, pos, angle, respawnTime );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_NotifyRespawnEnermy);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.NotifyRespawnEnermy;
        summary.rmiName = RmiName_NotifyRespawnEnermy;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyCharacterJoinMap="ReplyCharacterJoinMap";
public const string RmiName_ReplyCharacterJoinPublicPortal="ReplyCharacterJoinPublicPortal";
public const string RmiName_ReplyCharacterJoinPrivateMap="ReplyCharacterJoinPrivateMap";
public const string RmiName_ReplyCharacterJoinPrivatePortal="ReplyCharacterJoinPrivatePortal";
public const string RmiName_ReplyCharacterExitPrivateMap="ReplyCharacterExitPrivateMap";
public const string RmiName_ReplyPartyCreate="ReplyPartyCreate";
public const string RmiName_ReplyPartyJoin="ReplyPartyJoin";
public const string RmiName_ReplyPartyLeave="ReplyPartyLeave";
public const string RmiName_ReplyPartySetState="ReplyPartySetState";
public const string RmiName_NotifyPartyAppointHost="NotifyPartyAppointHost";
public const string RmiName_NotifyPartyJoinMember="NotifyPartyJoinMember";
public const string RmiName_NotifyPartyLeaveMember="NotifyPartyLeaveMember";
public const string RmiName_NotifyPartyMemberKick="NotifyPartyMemberKick";
public const string RmiName_NotifyRespawnEnermy="NotifyRespawnEnermy";
       
public const string RmiName_First = RmiName_ReplyCharacterJoinMap;
#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_ReplyCharacterJoinMap="";
public const string RmiName_ReplyCharacterJoinPublicPortal="";
public const string RmiName_ReplyCharacterJoinPrivateMap="";
public const string RmiName_ReplyCharacterJoinPrivatePortal="";
public const string RmiName_ReplyCharacterExitPrivateMap="";
public const string RmiName_ReplyPartyCreate="";
public const string RmiName_ReplyPartyJoin="";
public const string RmiName_ReplyPartyLeave="";
public const string RmiName_ReplyPartySetState="";
public const string RmiName_NotifyPartyAppointHost="";
public const string RmiName_NotifyPartyJoinMember="";
public const string RmiName_NotifyPartyLeaveMember="";
public const string RmiName_NotifyPartyMemberKick="";
public const string RmiName_NotifyRespawnEnermy="";
       
public const string RmiName_First = "";
#endif
		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

